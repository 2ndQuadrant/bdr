NEXT STEPS TO PROGRESS
----

startup races

WTF:

regression=# select * from bdr.node;
 pglogical_node_id | node_group_id | local_state | seq_id | confirmed_our_join |   dbname   
-------------------+---------------+-------------+--------+--------------------+------------
        1148549230 |    1360502012 |     8644737 |     -1 | f                  | regression
        3367056606 |    1360502012 |     8644737 |      0 | f                  | nxuD
(2 rows)


- "pending_cleanup" is too simplistic, need state fields. We have to track
   "peer just detached, needs reinit", "waiting for peer to detach so we can clear slot", etc.
 
  REALLY need to merge with bdr_messaging.c for queue state tracking, and in the process
  fix the reliance on getting pids in bdr_messaging.c

- Make use of active_pid == -1 consistently mean "busy in manager",
  make peer detach set it to hand over to manager for cleanup. Get rid
  of pending_cleanup flag in favour of testing pid array?

  active_pid = 0, node_id = 0 => empty slot, assert it to be so

- Finish conversion of adding active_pid

- fix FIXME in msgb_try_cleanup_peer_slot re detach of broker side

- Look into why supervisor doesn't reliably restart manager in timely way

- Delay starting messaging until have nodelist and nodegroup (manager)

- Implement consensus operation handlers for (not real consensus yet, but)
  - node name reserve
  - node standby (make slots)
  - node active (make origins+subscriptions, start replaying)

then BDR will work. So long as you don't expect consisent join. Or part.
Or crash safety. Or anything else, really.

COMPAT STUFF
---

bdr.bdr_group_create wrapper around bdr.create_node and bdr.create_node_group

HACKS TO PAY DOWN AND TODOs TO FINISH
----

- Instead of assuming there's an interface with the same name as the node,
  look up the interfaces being used by the join target node for its bdr
  subscriptions to peer nodes and use them.

- Permission checks in BDR internal SQL functions for join, messaging, etc

- Move node join process into manager

- Instead of restarting manager, notice when we add new nodes / remove nodes

- Do message serialization and deserialization for BdrMessage, ConsensusMessage
  using pqformat, not just memcpy'ing the structs.

- Submit messages as msgtype, payload and length, not formed BdrMessage with a bunch
  of unused fields.

- Move the messaging into a separate worker, lifetime managed by the pgl manager,
  and do all the bdr IPC/messaging via it. Fixes issues with long running xacts
  in manager, event loop spam, etc. Then unhack pglogical manager accordingly.

- allow submission of multiple msgs in a loop on shmem so we don't have
  to re-enter event loop with xact held open. can still happen due to
  buffer sizes etc, but less likely. (see README.messaging "future work")

- move bdr_messaging IPC into bdr_consensus,
  unify with bdr_msgbroker_recieve so we have a single pool of
  workers that can accept submits  (see README.messaging "future work")

- Fix submit of messages to manager so it doesn't hang indefinitely if
  manager dies. Need to either get bgworker handle (struct is private, but
  we can cheat), or switch to non-blocking MQs and check for pid change
  in manager PGPROC as found in bdr shmem seg

- Add a log filter hook to suppress logging output for
  bdr message submissions

FUTURE WORK
---

- see if we can get bgworkers to show application_name in logs

- Split out pglogical_replication_set_add_table row filter / attribute filter
  setup code for re-use by BDR

- one day we'll need a "domain" for consensus messages, with per-domain
  counters, to support multiple nodegroups...

- some way to specify non-default interfaces for each node when joining

- make bdr_debug_level a function like
  bdr_debug_level(DEBUG2)
  that promotes anything <= the current bdr_debug_level setting to LOG
  so we can still filter out really noisy stuff

  and add a subsystem identifier so we can trace just messaging, for 
  example

SANITY CHECKS AND DEFENSES NEEDED
---

- In output plugin check that repsets subscribed-to are bdr sets

- Starting join should make node read-only

- Disallow consensus messages until part of a nodegroup

- Check pg_depend for relationship to local pglogical node
