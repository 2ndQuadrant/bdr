# -*-makefile-*-
# Makefile.in
# @configure_input@

MODULE_big = bdr

EXTENSION = bdr
DATA = bdr--0.8.0.sql \
	bdr--0.7--0.7.1.sql bdr--0.7.1--0.8.0.sql \
	bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql \
	bdr--0.8.0.2--0.8.0.3.sql \
	bdr--0.8.0.3--0.8.0.4.sql \
	bdr--0.8.0.4--0.8.0.5.sql \
	bdr--0.8.0.5--0.8.0.6.sql \
	bdr--0.8.0.6--0.8.0.7.sql

DATA_built = bdr--0.8.0.1.sql bdr--0.8.0.2.sql  bdr--0.8.0.3.sql \
	bdr--0.8.0.4.sql bdr--0.8.0.5.sql bdr--0.8.0.6.sql \
	bdr--0.8.0.7.sql

DOCS = bdr.conf.sample README.bdr
SCRIPTS = scripts/bdr_initial_load bdr_init_copy bdr_resetxlog bdr_dump

PG_CPPFLAGS = -I$(libpq_srcdir)
SHLIB_LINK = $(libpq)

OBJS = \
	bdr.o \
	bdr_apply.o \
	bdr_perdb.o \
	bdr_catalogs.o \
	bdr_conflict_handlers.o \
	bdr_conflict_logging.o \
	bdr_commandfilter.o \
	bdr_compat.o \
	bdr_count.o \
	bdr_executor.o \
	bdr_init_replica.o \
	bdr_label.o \
	bdr_locks.o \
	bdr_output.o \
	bdr_relcache.o

ifeq "@BUILDING_BDR@" "1"
OBJS += \
	bdr_seq.o
else
OBJS += \
	bdr_replication_identifier.o
endif

DUMPOBJS = pg_dump/pg_dump.o pg_dump/common.o pg_dump/pg_dump_sort.o \
	pg_dump/pg_backup_archiver.o pg_dump/pg_backup_db.o \
	pg_dump/pg_backup_custom.o pg_dump/pg_backup_null.o \
	pg_dump/pg_backup_tar.o pg_dump/pg_backup_directory.o \
	pg_dump/pg_backup_utils.o pg_dump/parallel.o \
	pg_dump/compress_io.o pg_dump/dumputils.o \
	pg_dump/keywords.o

# Can only be built using pgxs
USE_PGXS=1

bdr_abs_srcdir := @srcdir@
PG_CONFIG :=@PG_CONFIG@
PGXS := $(shell $(PG_CONFIG) --pgxs)

VPATH=$(bdr_abs_srcdir)
USE_VPATH=$(bdr_abs_srcdir)
GIT_WORK_TREE=$(VPATH)
GIT_DIR=$(VPATH)/.git
export GIT_DIR
export GIT_WORK_TREE

include $(PGXS)

-include ${bdr_abs_srcdir}/Makefile.custom

# Ensure Makefiles are up2date
Makefile: Makefile.in $(shell pwd)/config.status
	./config.status $@

DATE=$(shell date "+%Y-%m-%d")
GITHASH=$(shell if [ -e .distgitrev ]; then cat .distgitrev; else GIT_DIR=$(VPATH)/.git git rev-parse --short HEAD; fi)
BDR_VERSION=$(shell awk '/^\#define BDR_VERSION / { print $3; }' ${bdr_abs_srcdir}/bdr_version.h.in | cut -d '"' -f 2)

bdr_version.h: ${bdr_abs_srcdir}/bdr_version.h.in
	sed '0,/BDR_VERSION_DATE/s,\(BDR_VERSION_DATE\).*,\1 "$(DATE)",;0,/BDR_VERSION_GITHASH/s,\(BDR_VERSION_GITHASH\).*,\1 "$(GITHASH)",' $< >$@

bdr.o: bdr_version.h

bdr_init_copy: bdr_init_copy.o
	$(CC) $(CFLAGS) $^ $(LDFLAGS) $(LDFLAGS_EX) $(libpq_pgport) $(LIBS) -o $@$(X)

scripts/bdr_initial_load: scripts/bdr_initial_load.in
	mkdir -p scripts
	sed -e "s/BDR_VERSION/$(BDR_VERSION)/" -e "s/PG_VERSION/$(VERSION)/" $< > $@

bdr--0.8.0.1.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql
	cat $^ > $@

bdr--0.8.0.2.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql
	cat $^ > $@

bdr--0.8.0.3.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql bdr--0.8.0.2--0.8.0.3.sql
	cat $^ > $@

bdr--0.8.0.4.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql bdr--0.8.0.2--0.8.0.3.sql \
	bdr--0.8.0.3--0.8.0.4.sql
	cat $^ > $@

bdr--0.8.0.5.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql bdr--0.8.0.2--0.8.0.3.sql \
	bdr--0.8.0.3--0.8.0.4.sql bdr--0.8.0.4--0.8.0.5.sql
	cat $^ > $@

bdr--0.8.0.6.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql bdr--0.8.0.2--0.8.0.3.sql \
	bdr--0.8.0.3--0.8.0.4.sql bdr--0.8.0.4--0.8.0.5.sql \
	bdr--0.8.0.5--0.8.0.6.sql
	cat $^ > $@

bdr--0.8.0.7.sql: bdr--0.8.0.sql bdr--0.8.0--0.8.0.1.sql \
	bdr--0.8.0.1--0.8.0.2.sql bdr--0.8.0.2--0.8.0.3.sql \
	bdr--0.8.0.3--0.8.0.4.sql bdr--0.8.0.4--0.8.0.5.sql \
	bdr--0.8.0.5--0.8.0.6.sql bdr--0.8.0.6--0.8.0.7.sql
	cat $^ > $@

bdr_resetxlog: pg_resetxlog.o
	$(CC) $(CFLAGS) $^ $(LDFLAGS) $(LDFLAGS_EX) $(libpq_pgport) $(LIBS) -o $@$(X)

pg_dump_dir:
	mkdir -p pg_dump

bdr_dump: pg_dump_dir $(DUMPOBJS)
	$(CC) $(CFLAGS) $(DUMPOBJS) $(libpq_pgport) $(LDFLAGS) $(LDFLAGS_EX) $(LIBS) -o $@$(X)

all: all-lib bdr_init_copy bdr_resetxlog bdr_dump

clean: additional-clean

maintainer-clean: additional-maintainer-clean

additional-clean:
	rm -f bdr_init_copy$(X) bdr_init_copy.o
	rm -f bdr_version.h
	rm -f .distgitrev
	rm -rf tmp_check
	rm -rf scripts/bdr_initial_load
	rm -f bdr_dump$(X) $(DUMPOBJS)

additional-maintainer-clean: clean
	rm -f configure
	rm -f config.status config.log
	rm -f bdr_config.h.in Makefile
	rm -f run_tests
	rm -f bdr--0.8.0.1.sql
	@rm -rf autom4te.cache/

# Disabled because these tests require "wal_level=logical", which
# typical installcheck users do not have (e.g. buildfarm clients).
installcheck: ;


ifeq "@BUILDING_BDR@" "1"
check: regresscheck isolationcheck
DDLREGRESSCHECKS=ddl/create ddl/alter_table ddl/extension ddl/function \
				 ddl/grant ddl/mixed ddl/namespace ddl/replication_set \
				 ddl/sequence ddl/view
else
check: regresscheck
DDLREGRESSCHECKS=
endif

REGRESSCHECKS= \
	init \
	upgrade \
	identifier \
	$(DDLREGRESSCHECKS) \
	dml/basic dml/contrib dml/delete_pk dml/extended dml/missing_pk dml/toasted


ISOLATIONCHECKS=\
	isolation/waitforstart \
	isolation/ddlconflict \
	isolation/dmlconflict_ii \
	isolation/dmlconflict_uu \
	isolation/dmlconflict_ud \
	isolation/dmlconflict_dd \
	isolation/alter_table \
	isolation/basic_triple_node
#	this test demonstrates a divergent conflict, so deactivate for now
#	isolation/update_pk_change_conflict

# XXX: Add a check that these are installed
REQUIRED_EXTENSIONS="btree_gist"
REQUIRED_TEST_EXTENSIONS="pg_trgm cube hstore"

ifeq "@BUILDING_BDR@" "1"
REGRESSCONFIG=bdr_regress_bdr.conf
else
REGRESSCONFIG=bdr_regress_udr.conf
endif

regresscheck: all install
	[ -e pg_hba.conf ] || ln -s $(bdr_abs_srcdir)/pg_hba.conf .

	mkdir -p results/ddl
	mkdir -p results/dml

	./run_tests --config $(bdr_abs_srcdir)/$(REGRESSCONFIG) \
		--testbinary src/test/regress/pg_regress \
		$(REGRESSCHECKS)

isolationcheck: all install
	mkdir -p results/isolation

	./run_tests --config $(bdr_abs_srcdir)/bdr_isolationregress.conf \
		--testbinary src/test/isolation/pg_isolation_regress \
		--dbname node1,node2,node3 \
		$(ISOLATIONCHECKS)

bdr_pgbench_check: bdr_pgbench_check.sh
	sed -e 's,@bindir@,$(bindir),g' \
	    -e 's,@libdir@,$(libdir),g' \
	    -e 's,@MAKE@,$(MAKE),g' \
	    -e 's,@top_srcdir@,$(top_srcdir),g' \
	  $< >$@
	chmod a+x $@

pgbenchcheck: bdr_pgbench_check
	./bdr_pgbench_check

distdir = bdr-$(BDR_VERSION)

git-dist: clean
	rm -f .distgitrev .distgittag
	if ! git diff-index --quiet HEAD; then echo >&2 "WARNING: git working tree has uncommitted changes to tracked files which were INCLUDED"; fi
	if [ -n "`git ls-files --exclude-standard --others`" ]; then echo >&2 "WARNING: git working tree has unstaged files which were IGNORED!"; fi
	echo $(GITHASH) > .distgitrev
	git name-rev --tags --name-only `cat .distgitrev` > .distgittag
	git ls-tree -r -t --full-tree HEAD --name-only |\
	  tar cjf "${distdir}.tar.bz2" --transform="s|^|${distdir}/|" -T - \
	    .distgitrev .distgittag
	echo >&2 "Prepared ${distdir}.tar.bz2 for rev=`cat .distgitrev`, tag=`cat .distgittag`"
	rm -f .distgitrev .distgittag

PHONY: submake-regress

# phony target...

.PHONY: all check regresscheck isolationcheck
