---
--- DEPARSE_TEST
---
\pset format unaligned
\pset tuples_only
\o ./sql/deparse_dump.sql
SELECT command || ';' FROM deparse.deparse_test_commands ORDER BY id;
\! @psqldir@/psql --dbname=@deparse_test_db@ < ./sql/deparse_dump.sql > /dev/null
\! @psqldir@/pg_dump --schema-only --no-owner --no-privileges --exclude-schema=deparse -Fp @deparse_test_db@ | perl -n -e 'print unless /^-- Dumped/'
--
-- PostgreSQL database dump
--


SET row_security = off;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: bar; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA bar;


--
-- Name: baz; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA baz;


--
-- Name: element_test; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA element_test;


--
-- Name: foo; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA foo;


--
-- Name: SCHEMA foo; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA foo IS 'This is schema foo';


--
-- Name: zzz; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA zzz;


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA public;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION pg_stat_statements IS 'track execution statistics of all SQL statements executed';


SET search_path = public, pg_catalog;

--
-- Name: domainvarchar; Type: DOMAIN; Schema: public; Owner: -
--

CREATE DOMAIN domainvarchar AS character varying(5);


--
-- Name: enum_test; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE enum_test AS ENUM (
    'aaa',
    'foo',
    'bar',
    'baz',
    'zzz'
);


--
-- Name: japanese_postal_code; Type: DOMAIN; Schema: public; Owner: -
--

CREATE DOMAIN japanese_postal_code AS text
	CONSTRAINT japanese_postal_code_check CHECK (((VALUE ~ '^\d{3}$'::text) OR (VALUE ~ '^\d{3}-\d{4}$'::text)));


--
-- Name: c_function_test(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION c_function_test() RETURNS integer
    LANGUAGE c
    AS '@libdir@/regress@DLSUFFIX@', 'c_function_test';


--
-- Name: plpgsql_function(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION plpgsql_function() RETURNS text
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN 'Stable output'::TEXT;
END;
$$;


--
-- Name: plpgsql_function_complex(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION plpgsql_function_complex() RETURNS text
    LANGUAGE plpgsql STRICT SECURITY DEFINER COST 10
    SET enable_bitmapscan TO 'false'
    AS $$
BEGIN
  RETURN 'Volatile output: ' || CLOCK_TIMESTAMP()::TEXT;
END;
$$;


--
-- Name: plpgsql_function_old_attributes(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION plpgsql_function_old_attributes(v_input text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
BEGIN
  RETURN v_input;
END;
$$;


--
-- Name: plpgsql_function_srf(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION plpgsql_function_srf(v_input text DEFAULT 'foo'::text) RETURNS SETOF text
    LANGUAGE plpgsql IMMUTABLE STRICT SECURITY DEFINER LEAKPROOF ROWS 3
    AS $$
BEGIN
  RETURN NEXT 'Input value:';
  RETURN NEXT v_input;
END;
$$;


--
-- Name: sql_function(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sql_function() RETURNS text
    LANGUAGE sql
    AS $$
  SELECT 'Test function replaced'::TEXT;
$$;


--
-- Name: sql_function_in_out(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sql_function_in_out(text, OUT text) RETURNS text
    LANGUAGE sql STABLE
    AS $_$
    SELECT 'Input: ' || $1;
$_$;


--
-- Name: sql_function_in_out_default(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sql_function_in_out_default(text DEFAULT 'foo'::text, OUT text) RETURNS text
    LANGUAGE sql STABLE
    AS $_$
    SELECT 'Input: ' || $1;
$_$;


SET search_path = element_test, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: foo; Type: TABLE; Schema: element_test; Owner: -; Tablespace: 
--

CREATE TABLE foo (
    id integer
);


--
-- Name: bar; Type: VIEW; Schema: element_test; Owner: -
--

CREATE VIEW bar AS
 SELECT foo.id
   FROM foo;


SET search_path = public, pg_catalog;

--
-- Name: datatype_table; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE datatype_table (
    id integer NOT NULL,
    id_big bigint NOT NULL,
    v_smallint smallint,
    v_int integer,
    v_bigint bigint,
    v_char character(1),
    v_varchar character varying(10),
    v_text text,
    v_bool boolean,
    v_inet inet,
    v_numeric numeric(1,0),
    v_float real,
    v_tsvector tsvector,
    v_timestamp timestamp without time zone,
    v_timestamp_tz timestamp with time zone,
    v_point point,
    v_enum enum_test,
    v_postal_code japanese_postal_code
);


--
-- Name: TABLE datatype_table; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE datatype_table IS 'This table should contain all native datatypes';


--
-- Name: datatype_table_id_big_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE datatype_table_id_big_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: datatype_table_id_big_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE datatype_table_id_big_seq OWNED BY datatype_table.id_big;


--
-- Name: datatype_table_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE datatype_table_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: datatype_table_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE datatype_table_id_seq OWNED BY datatype_table.id;


--
-- Name: datatype_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW datatype_view AS
 SELECT datatype_table.id,
    datatype_table.id_big,
    datatype_table.v_smallint,
    datatype_table.v_int,
    datatype_table.v_bigint,
    datatype_table.v_char,
    datatype_table.v_varchar,
    datatype_table.v_text,
    datatype_table.v_bool,
    datatype_table.v_inet,
    datatype_table.v_numeric,
    datatype_table.v_float,
    datatype_table.v_tsvector,
    datatype_table.v_timestamp,
    datatype_table.v_timestamp_tz,
    datatype_table.v_point,
    datatype_table.v_enum,
    datatype_table.v_postal_code
   FROM datatype_table;


--
-- Name: VIEW datatype_view; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW datatype_view IS 'This is a view';


--
-- Name: person; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE person (
    id integer NOT NULL,
    name text,
    age integer,
    location point
);


SET default_with_oids = true;

--
-- Name: emp; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE emp (
    salary integer,
    manager name
)
INHERITS (person);


--
-- Name: fkey_table_seq_renamed; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE fkey_table_seq_renamed
    START WITH 20
    INCREMENT BY 1
    MINVALUE 10
    MAXVALUE 1000000
    CACHE 1;


SET default_with_oids = false;

--
-- Name: fkey_table; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE fkey_table (
    id integer DEFAULT nextval('fkey_table_seq_renamed'::regclass) NOT NULL,
    datatype_id integer NOT NULL,
    big_id bigint NOT NULL
);


--
-- Name: like_fkey_table; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE like_fkey_table (
    id integer DEFAULT nextval('fkey_table_seq_renamed'::regclass) NOT NULL,
    datatype_id integer NOT NULL,
    big_id bigint NOT NULL
);


--
-- Name: nums_1_100; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW nums_1_100 AS
 WITH RECURSIVE nums_1_100(n) AS (
         VALUES (1)
        UNION ALL
         SELECT (nums_1_100_1.n + 1)
           FROM nums_1_100 nums_1_100_1
          WHERE (nums_1_100_1.n < 100)
        )
 SELECT nums_1_100.n
   FROM nums_1_100;


--
-- Name: person_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE person_id_seq
    START WITH 1000
    INCREMENT BY 10
    MINVALUE 1000
    MAXVALUE 5000000
    CACHE 10
    CYCLE;


--
-- Name: person_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE person_id_seq OWNED BY person.id;


--
-- Name: person_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW person_view WITH (security_barrier=true) AS
 SELECT person.id,
    person.name,
    person.age,
    person.location
   FROM person
  WHERE (person.id > 100)
  WITH LOCAL CHECK OPTION;


--
-- Name: static_values_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW static_values_view AS
 VALUES ('bar'::text);


--
-- Name: static_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW static_view AS
 SELECT 'bar'::text AS col;


--
-- Name: storage; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE storage (
    id integer
)
WITH (fillfactor=10, autovacuum_enabled=false);


--
-- Name: student; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE student (
    gpa double precision
)
INHERITS (person);


SET default_with_oids = true;

--
-- Name: stud_emp; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE stud_emp (
    percent integer
)
INHERITS (emp, student);


SET default_with_oids = false;

--
-- Name: unlogged_table; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE UNLOGGED TABLE unlogged_table (
    id integer NOT NULL
);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY datatype_table ALTER COLUMN id SET DEFAULT nextval('datatype_table_id_seq'::regclass);


--
-- Name: id_big; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY datatype_table ALTER COLUMN id_big SET DEFAULT nextval('datatype_table_id_big_seq'::regclass);


--
-- Name: datatype_table_id_big_key; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY datatype_table
    ADD CONSTRAINT datatype_table_id_big_key UNIQUE (id_big);


--
-- Name: datatype_table_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY datatype_table
    ADD CONSTRAINT datatype_table_pkey PRIMARY KEY (id);


--
-- Name: fkey_table_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY fkey_table
    ADD CONSTRAINT fkey_table_pkey PRIMARY KEY (id);


--
-- Name: like_fkey_table_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY like_fkey_table
    ADD CONSTRAINT like_fkey_table_pkey PRIMARY KEY (id);


--
-- Name: person_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY person
    ADD CONSTRAINT person_pkey PRIMARY KEY (id);


--
-- Name: unlogged_table_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY unlogged_table
    ADD CONSTRAINT unlogged_table_pkey PRIMARY KEY (id);


--
-- Name: test_gin_1; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_gin_1 ON datatype_table USING gin (v_tsvector);


--
-- Name: test_gin_2; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_gin_2 ON datatype_table USING gin (v_tsvector) WITH (fastupdate=off);


--
-- Name: test_gist_1; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_gist_1 ON datatype_table USING gist (v_tsvector) WITH (buffering=on);


--
-- Name: test_hash_1; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_hash_1 ON datatype_table USING hash (v_text);


--
-- Name: test_index_1; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_1 ON datatype_table USING btree (v_smallint);


--
-- Name: test_index_10; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_10 ON datatype_table USING btree (v_bigint DESC);


--
-- Name: test_index_11; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_11 ON datatype_table USING btree (v_smallint);


--
-- Name: test_index_2; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_2 ON datatype_table USING btree (v_smallint, v_int);


--
-- Name: test_index_3; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_3 ON datatype_table USING btree (v_int) WHERE (v_int > 100);


--
-- Name: test_index_4; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE UNIQUE INDEX test_index_4 ON datatype_table USING btree (v_bigint);


--
-- Name: test_index_5; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_5 ON datatype_table USING btree (v_int);


--
-- Name: test_index_6; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_6 ON datatype_table USING btree (v_text) WITH (fillfactor=50);


--
-- Name: test_index_7; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_7 ON datatype_table USING btree (v_text COLLATE "ja_JP");


--
-- Name: test_index_8; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_8 ON datatype_table USING btree (lower(v_text));


--
-- Name: test_index_9; Type: INDEX; Schema: public; Owner: -; Tablespace: 
--

CREATE INDEX test_index_9 ON datatype_table USING btree (v_smallint NULLS FIRST);


--
-- Name: fkey_big_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY fkey_table
    ADD CONSTRAINT fkey_big_id FOREIGN KEY (big_id) REFERENCES datatype_table(id_big);


--
-- Name: fkey_table_datatype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY fkey_table
    ADD CONSTRAINT fkey_table_datatype_id_fkey FOREIGN KEY (datatype_id) REFERENCES datatype_table(id);


--
-- PostgreSQL database dump complete
--

