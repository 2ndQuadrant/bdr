---
--- DEPARSE_TEST
---
\pset format unaligned
\pset tuples_only
\o ./sql/deparse_dump.sql
SELECT command || ';' FROM deparse.deparse_test_commands ORDER BY id;
\! @psqldir@/psql --dbname=@deparse_test_db@ < ./sql/deparse_dump.sql > /dev/null
\! @psqldir@/pg_dump --schema-only --no-owner --no-privileges --exclude-schema=deparse -Fp @deparse_test_db@ | perl -n -e 'print unless /^-- Dumped/'
--
-- PostgreSQL database dump
--


SET row_security = off;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: c_function_test(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION c_function_test() RETURNS integer
    LANGUAGE c
    AS '@libdir@/regress@DLSUFFIX@', 'c_function_test';


--
-- Name: sql_function(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sql_function() RETURNS text
    LANGUAGE sql
    AS $$
  SELECT 'Test function replaced'::TEXT;
$$;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: datatype_table; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE datatype_table (
    id integer NOT NULL,
    id_big bigint NOT NULL,
    v_smallint smallint,
    v_int integer,
    v_bigint bigint,
    v_char character(1),
    v_varchar character varying(10),
    v_text text,
    v_bool boolean,
    v_inet inet,
    v_numeric numeric(1,0),
    v_float real,
    v_tsvector tsvector,
    v_timestamp1 timestamp without time zone,
    v_timestamp2 timestamp with time zone
);


--
-- Name: datatype_table_id_big_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE datatype_table_id_big_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: datatype_table_id_big_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE datatype_table_id_big_seq OWNED BY datatype_table.id_big;


--
-- Name: datatype_table_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE datatype_table_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: datatype_table_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE datatype_table_id_seq OWNED BY datatype_table.id;


--
-- Name: fkey_table; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

CREATE TABLE fkey_table (
    id integer NOT NULL,
    datatype_id integer NOT NULL,
    big_id bigint NOT NULL
);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY datatype_table ALTER COLUMN id SET DEFAULT nextval('datatype_table_id_seq'::regclass);


--
-- Name: id_big; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY datatype_table ALTER COLUMN id_big SET DEFAULT nextval('datatype_table_id_big_seq'::regclass);


--
-- Name: datatype_table_id_big_key; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY datatype_table
    ADD CONSTRAINT datatype_table_id_big_key UNIQUE (id_big);


--
-- Name: datatype_table_pkey; Type: CONSTRAINT; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE ONLY datatype_table
    ADD CONSTRAINT datatype_table_pkey PRIMARY KEY (id);


--
-- Name: fkey_big_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY fkey_table
    ADD CONSTRAINT fkey_big_id FOREIGN KEY (big_id) REFERENCES datatype_table(id_big);


--
-- Name: fkey_table_datatype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY fkey_table
    ADD CONSTRAINT fkey_table_datatype_id_fkey FOREIGN KEY (datatype_id) REFERENCES datatype_table(id);


--
-- Name: deparse_test_trg_ddl_command_end; Type: EVENT TRIGGER; Schema: -; Owner: -
--

CREATE EVENT TRIGGER deparse_test_trg_ddl_command_end ON ddl_command_end 
   EXECUTE PROCEDURE deparse.deparse_test_ddl_command_end();


--
-- PostgreSQL database dump complete
--

