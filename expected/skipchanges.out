\c regression
SELECT bdr.bdr_replicate_ddl_command($DDL$
CREATE TABLE public.test_replication(id integer not null primary key, atlsn pg_lsn default pg_current_xlog_insert_location());
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

INSERT INTO test_replication(id) VALUES (1);
-- Error cases
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/0')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) != bdr.bdr_get_local_nodeid();
ERROR:  skipping changes is unsafe and will cause replicas to be out of sync
HINT:  Set bdr.permit_unsafe_ddl_commands if you are sure you want to do this
SET bdr.permit_unsafe_ddl_commands = on;
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/0')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) != bdr.bdr_get_local_nodeid();
ERROR:  Target LSN must be nonzero
-- Access a bogus node.
-- Needs a wrapper because of message differences between 9.4bdr and 9.6
DO LANGUAGE plpgsql
$$
DECLARE
  errm text;
BEGIN
  PERFORM bdr.skip_changes_upto('0', 0, 1234, '0/1');
EXCEPTION
  WHEN others THEN
    GET STACKED DIAGNOSTICS
       errm = MESSAGE_TEXT;
    RAISE WARNING 'ERR: "%"', errm;
    IF errm LIKE '%cache lookup failed for % bdr_0_0_1234_16385_' THEN
      RAISE EXCEPTION 'Got expected lookup error';
    ELSE
      RAISE;
    END IF;
END;
$$;
WARNING:  ERR: "cache lookup failed for replication identifier named bdr_0_0_1234_16385_"
ERROR:  Got expected lookup error
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/1')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) = bdr.bdr_get_local_nodeid();
ERROR:  the passed ID is for the local node, can't skip changes from self
-- Skipping the past must do nothing. The LSN isn't exposed in
-- pg_replication_identifier so this'll just produce no visible result, but not
-- break anything.
SELECT bdr.skip_changes_upto(n.node_sysid, n.node_timeline, n.node_dboid, '0/1')
FROM bdr.bdr_nodes n
WHERE (n.node_sysid, n.node_timeline, n.node_dboid) != bdr.bdr_get_local_nodeid();
 skip_changes_upto 
-------------------
 
(1 row)

INSERT INTO test_replication(id) VALUES (2);
-- Create a situation where a commit will constantly fail to replay until skipped.
SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), 0);
 pg_xlog_wait_remote_apply 
---------------------------
 
(1 row)

\c postgres
SELECT id FROM test_replication ORDER BY id;
 id 
----
  1
  2
(2 rows)

\c regression
-- This should become visible on the downstream
INSERT INTO test_replication(id) VALUES (3);
BEGIN;
SET LOCAL bdr.skip_ddl_replication = on;
SET LOCAL bdr.skip_ddl_locking = on;
CREATE TABLE break_me(blah text);
COMMIT;
-- So should this
INSERT INTO test_replication(id) VALUES (4);
SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), 0);
 pg_xlog_wait_remote_apply 
---------------------------
 
(1 row)

-- break replication
BEGIN;
SET LOCAL bdr.skip_ddl_locking = on;
SELECT bdr.bdr_replicate_ddl_command($DDL$
DROP TABLE public.break_me;
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

COMMIT;
-- Should never be seen on downstream, since it won't replay past the broken
-- DDL and we'll drop changes from the broken DDL until after it since we take
-- the skip-to position after this statement runs.
INSERT INTO test_replication(id) VALUES (5);
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- Most likely the other side's apply worker just died and will keep reconnecting
-- then immediately dying when it tries to replay the bad statement. We can't use
-- pg_xlog_wait_remote_apply(..) with a timeout because it won't wait for a worker
-- that isn't there. So we can't usefully wait to ensure there's no catchup.
\c postgres
-- Entry 5 shouldn't be visible since we can't replay past the broken
-- DDL
SELECT id FROM test_replication ORDER BY id;
 id 
----
  1
  2
  3
  4
(4 rows)

\c regression
-- Better tell the downstream to discard changes up to and including the
-- problem commit. This would be easier in a real programming language not
-- psql, but we have \gset at least.
SELECT pg_current_xlog_insert_location() AS lsn_to_skip_to \gset
SELECT * FROM bdr.bdr_get_local_nodeid() \gset regression_
-- This is committed after the point we'll skip to, and should
-- be replayed on the downstream, so test_replication will contain
-- 1, 2, 3, 4, 6
INSERT INTO test_replication(id) VALUES (6);
\c postgres
SELECT id FROM test_replication ORDER BY id;
 id 
----
  1
  2
  3
  4
(4 rows)

BEGIN;
SET LOCAL bdr.permit_unsafe_ddl_commands = on;
SELECT bdr.skip_changes_upto(:'regression_sysid', :regression_timeline, :regression_dboid, :'lsn_to_skip_to');
 skip_changes_upto 
-------------------
 
(1 row)

COMMIT;
\c regression
-- It should catch up now. We can't pg_xlog_wait_remote_apply() since the apply worker
-- might not have started back up after the last failure; wait 5s (the restart interval),
-- make sure there are two workers, and wait for catchup.
SELECT pg_sleep(12);
 pg_sleep 
----------
 
(1 row)

SELECT count(*) FROM pg_stat_replication;
 count 
-------
     2
(1 row)

SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), 0);
 pg_xlog_wait_remote_apply 
---------------------------
 
(1 row)

\c postgres
-- Should see all rows 1-4 and 6 now
SELECT id FROM test_replication ORDER BY id;
 id 
----
  1
  2
  3
  4
  6
(5 rows)

\c regression
-- on the upstream we should see all rows 1-6, since
-- we never deleted 5, just skipped replicating it.
SELECT id FROM test_replication ORDER BY id;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

