SELECT * FROM bdr_regress_variables()
\gset
\set VERBOSITY terse
\c :node1_dsn
CREATE EXTENSION bdr CASCADE;
NOTICE:  installing required extension "pglogical"
SELECT E'\'' || current_database() || E'\'' AS node1_db
\gset
\c :node2_dsn
CREATE EXTENSION bdr CASCADE;
NOTICE:  installing required extension "pglogical"
SELECT E'\'' || current_database() || E'\'' AS node2_db
\gset
\c :node1_dsn
-- Only used in tests
CREATE FUNCTION bdr_submit_comment(message text)
RETURNS text LANGUAGE c STRICT AS 'bdr','bdr_submit_comment';
SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
(0 rows)

SELECT 1
FROM bdr.create_node(node_name := 'node1', local_dsn := :'node1_dsn' || ' user=super');
NOTICE:  creating new pglogical node
 ?column? 
----------
        1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node1     |                0 |                | node1
(1 row)

SELECT 1
FROM bdr.create_node_group('bdrgroup');
 ?column? 
----------
        1
(1 row)

-- Wait for the creating node to go fully active
DO LANGUAGE plpgsql $$
BEGIN
  WHILE NOT EXISTS (SELECT 1 FROM bdr.state_journal_details WHERE state_name = 'ACTIVE')
  LOOP
    PERFORM pg_sleep(0.5);
  END LOOP;
END;
$$;
SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node1     |                0 | bdrgroup       | node1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info((SELECT node_group_id FROM bdr.node_group));
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node1     |                0 | bdrgroup       | node1
(1 row)

\c :node2_dsn
SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
(0 rows)

SELECT 1
FROM bdr.create_node(node_name := 'node2', local_dsn := :'node2_dsn' || ' user=super');
NOTICE:  creating new pglogical node
 ?column? 
----------
        1
(1 row)

-- TODO: https://redmine.2ndquadrant.com/issues/1057
SELECT pg_sleep(0.5);
 pg_sleep 
----------
 
(1 row)

SELECT 1
FROM bdr.join_node_group(:'node1_dsn', 'nosuch-nodegroup');
ERROR:  remote node is member of nodegroup bdrgroup but we asked to join nodegroup nosuch-nodegroup
-- TODO: https://redmine.2ndquadrant.com/issues/1057
SELECT pg_sleep(0.5);
 pg_sleep 
----------
 
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info((SELECT node_group_id FROM bdr.node_group));
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node2     |                0 |                | node2
(1 row)

SELECT 1 FROM bdr.join_node_group(:'node1_dsn');
NOTICE:  node join started
 ?column? 
----------
        1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info((SELECT node_group_id FROM bdr.node_group));
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node2     |                0 | bdrgroup       | node2
 node1     |                0 | bdrgroup       | node1
(2 rows)

\c :node1_dsn
-- A dummy transaction will help make sure we make prompt progress.
SELECT 1 FROM txid_current();
 ?column? 
----------
        1
(1 row)

-- Forcing a checkpoint will force out replication origins and make us
-- advance more promptly too.
CHECKPOINT;
\c :node2_dsn
-- Wait for the joining node to go fully active
DO LANGUAGE plpgsql $$
BEGIN
  WHILE NOT EXISTS (SELECT 1 FROM bdr.state_journal_details WHERE state_name = 'ACTIVE')
  LOOP
    PERFORM pg_sleep(0.5);
  END LOOP;
END;
$$;
\c :node1_dsn
-- Wait for the join target to start replaying from the joining node
-- at the end of BDR setup.
DO LANGUAGE plpgsql $$
BEGIN
  WHILE NOT EXISTS (SELECT 1 FROM pglogical.show_subscription_status() WHERE status = 'replicating')
  LOOP
    PERFORM pg_sleep(0.5);
  END LOOP;
END;
$$;
SELECT subscription_name, status, provider_node, slot_name, replication_sets
FROM pglogical.show_subscription_status();
 subscription_name |   status    | provider_node |              slot_name              | replication_sets 
-------------------+-------------+---------------+-------------------------------------+------------------
 bdrgroup_node2    | replicating | node2         | bdr_regression_bdrgroup_node2_node1 | {bdrgroup}
(1 row)

SET client_min_messages = notice;
-- Wait for it to start up
-- We already created the slots so all we have to do here is wait for
-- the slots to be in sync once we do some WAL-logged work on the
-- upstreams.
CREATE TABLE throwaway AS SELECT 1;
\c :node2_dsn
CREATE TABLE throwaway AS SELECT 1;
\c :node1_dsn
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT application_name, sync_state
FROM pg_stat_replication
ORDER BY application_name;
 application_name | sync_state 
------------------+------------
 bdrgroup_node1   | async
 bdrgroup_node2   | async
(2 rows)

SELECT slot_name, plugin, slot_type, database, temporary, active
FROM pg_replication_slots ORDER BY slot_name;
              slot_name              |      plugin      | slot_type |  database  | temporary | active 
-------------------------------------+------------------+-----------+------------+-----------+--------
 bdr_postgres_bdrgroup_node1_node2   | pglogical_output | logical   | regression | f         | t
 bdr_regression_bdrgroup_node2_node1 | pglogical_output | logical   | postgres   | f         | t
(2 rows)

SELECT
    backend_type,
    regexp_replace(application_name, '[[:digit:]]', 'n', 'g') AS appname
FROM pg_stat_activity
WHERE application_name LIKE 'pglogical%'
ORDER BY appname;
   backend_type    |               appname               
-------------------+-------------------------------------
 background worker | pglogical manager nnnnn
 background worker | pglogical manager nnnnn
 background worker | pglogical receiver nnnnn:nnnnnnnnnn
 background worker | pglogical receiver nnnnn:nnnnnnnnnn
 background worker | pglogical supervisor
(5 rows)

\c :node2_dsn
SELECT subscription_name, status, provider_node, slot_name, replication_sets
FROM pglogical.show_subscription_status();
 subscription_name |   status    | provider_node |             slot_name             | replication_sets 
-------------------+-------------+---------------+-----------------------------------+------------------
 bdrgroup_node1    | replicating | node1         | bdr_postgres_bdrgroup_node1_node2 | {bdrgroup}
(1 row)

\c :node1_dsn
SELECT
    state_counter, state, state_name, peer_id, peer_name,
    regexp_replace(
	regexp_replace(extra_data, '[[:xdigit:]]{1,8}/[[:xdigit:]]{8}', 'X/XXXXXXXX'),
	 '[[:digit:]]', 'n', 'g') AS extra_data_masked
FROM bdr.state_journal_details;
 state_counter | state |         state_name         |  peer_id   | peer_name | extra_data_masked 
---------------+-------+----------------------------+------------+-----------+-------------------
             1 |     1 | CREATED                    |          0 |           | 
             2 |  5000 | ACTIVE                     |          0 |           | 
             3 |  5010 | ACTIVE_SLOT_CREATE_PENDING | 3367056606 | node2     | 
             4 |  5000 | ACTIVE                     |          0 |           | 
             5 |  5010 | ACTIVE_SLOT_CREATE_PENDING | 3367056606 | node2     | 
             6 |  5000 | ACTIVE                     |          0 |           | 
(6 rows)

\c :node2_dsn
SELECT
    state_counter, state, state_name, peer_id, peer_name,
    regexp_replace(
	regexp_replace(extra_data, '[[:xdigit:]]{1,8}/[[:xdigit:]]{8}', 'X/XXXXXXXX'),
	 '[[:digit:]]', 'n', 'g') AS extra_data_masked
FROM bdr.state_journal_details;
 state_counter | state |          state_name          |  peer_id   | peer_name |         extra_data_masked          
---------------+-------+------------------------------+------------+-----------+------------------------------------
             1 |     1 | CREATED                      |          0 |           | 
             2 |  1000 | JOIN_START                   | 1148549230 | node1     | node group name: bdrgroup
             3 |  1010 | JOIN_WAIT_CONFIRM            | 1148549230 | node1     | global consensus message handle: n
             4 |  1020 | JOIN_COPY_REMOTE_NODES       | 1148549230 | node1     | 
             5 |  1040 | JOIN_SUBSCRIBE_JOIN_TARGET   | 1148549230 | node1     | 
             6 |  1050 | JOIN_WAIT_SUBSCRIBE_COMPLETE | 1148549230 | node1     | 
             7 |  1060 | JOIN_GET_CATCHUP_LSN         | 1148549230 | node1     | 
             8 |  1070 | JOIN_WAIT_CATCHUP            | 1148549230 | node1     | minimum catchup lsn: X/XXXXXXXX
             9 |  1080 | JOIN_COPY_REPSET_MEMBERSHIPS | 1148549230 | node1     | 
            10 |  1090 | JOIN_CREATE_SUBSCRIPTIONS    | 1148549230 | node1     | 
            11 |  1100 | SEND_CATCHUP_READY           | 1148549230 | node1     | 
            12 |  2000 | STANDBY                      | 1148549230 | node1     | 
            13 |  2030 | CREATE_SLOTS                 | 1148549230 | node1     | 
            14 |  2040 | SEND_ACTIVE_ANNOUNCE         | 1148549230 | node1     | 
            15 |  5000 | ACTIVE                       |          0 |           | 
(15 rows)

