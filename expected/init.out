SELECT * FROM bdr_regress_variables()
\gset
\set VERBOSITY terse
\c :node1_dsn
CREATE EXTENSION bdr CASCADE;
NOTICE:  installing required extension "pglogical"
SELECT E'\'' || current_database() || E'\'' AS node1_db
\gset
\c :node2_dsn
CREATE EXTENSION bdr CASCADE;
NOTICE:  installing required extension "pglogical"
SELECT E'\'' || current_database() || E'\'' AS node2_db
\gset
\c :node1_dsn
-- Only used in tests
CREATE FUNCTION bdr_submit_comment(message text)
RETURNS text LANGUAGE c STRICT AS 'bdr','bdr_submit_comment';
SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
(0 rows)

SELECT 1
FROM bdr.create_node(node_name := 'node1', local_dsn := :'node1_dsn' || ' user=super');
NOTICE:  creating new pglogical node
 ?column? 
----------
        1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node1     |          8644737 |                | node1
(1 row)

SELECT 1
FROM bdr.create_node_group('bdrgroup');
 ?column? 
----------
        1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node1     |          8644737 | bdrgroup       | node1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info((SELECT node_group_id FROM bdr.node_group));
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node1     |          8644737 | bdrgroup       | node1
(1 row)

-- We must create a slot before creating the subscription to work
-- around the deadlock in 2ndQuadrant/pglogical_internal#152
-- TODO: BDR should do this automatically
SELECT slot_name FROM pg_create_logical_replication_slot(pglogical.pglogical_gen_slot_name(:node2_db, 'node1', 'bdrgroup_node1'), 'pglogical');
             slot_name             
-----------------------------------
 pgl_postgres_node1_bdrgroup_node1
(1 row)

\c :node2_dsn
SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info(NULL);
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
(0 rows)

SELECT 1
FROM bdr.create_node(node_name := 'node2', local_dsn := :'node2_dsn' || ' user=super');
NOTICE:  creating new pglogical node
 ?column? 
----------
        1
(1 row)

SELECT 1
FROM bdr.join_node_group(:'node1_dsn', 'nosuch-nodegroup');
ERROR:  remote node is member of nodegroup bdrgroup but we asked to join nodegroup nosuch-nodegroup
SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info((SELECT node_group_id FROM bdr.node_group));
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node2     |          8644737 |                | node2
(1 row)

SELECT 1
FROM bdr.join_node_group(:'node1_dsn', 'bdrgroup');
NOTICE:  3367056606 joining nodegroup bdrgroup (1360502012) via remote node node1 (node_id 1148549230)
WARNING:  replication set memberships copy not implemented
WARNING:  bringing up consensus manager not implemented
WARNING:  ignoring minimum catchup lsn: 0/1817A90
WARNING:  killed manager for db 13246
 ?column? 
----------
        1
(1 row)

SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT 1 FROM bdr.join_node_group_finish(); -- XXX should go away soon
 ?column? 
----------
        1
(1 row)

SELECT node_name, node_local_state, nodegroup_name, pgl_interface_name FROM bdr.node_group_member_info((SELECT node_group_id FROM bdr.node_group));
 node_name | node_local_state | nodegroup_name | pgl_interface_name 
-----------+------------------+----------------+--------------------
 node2     |          8644737 | bdrgroup       | node2
 node1     |          8644737 | bdrgroup       | node1
(2 rows)

SELECT subscription_name, status, provider_node, slot_name, replication_sets
FROM pglogical.show_subscription_status();
 subscription_name |   status    | provider_node |             slot_name             | replication_sets 
-------------------+-------------+---------------+-----------------------------------+------------------
 bdrgroup_node1    | replicating | node1         | pgl_postgres_node1_bdrgroup_node1 | {bdrgroup}
(1 row)

-- See above...
-- TODO: BDR should do this automatically
SELECT slot_name FROM pg_create_logical_replication_slot(pglogical.pglogical_gen_slot_name(:node1_db, 'node2', 'bdrgroup_node2'), 'pglogical');
ERROR:  replication slot "pgl_regression_node2_bdrgroup_node2" already exists
\c :node1_dsn
DO LANGUAGE plpgsql $$
BEGIN
  WHILE NOT EXISTS (SELECT 1 FROM pglogical.show_subscription_status() WHERE status = 'replicating')
  LOOP
    PERFORM pg_sleep(0.5);
  END LOOP;
END;
$$;
SELECT subscription_name, status, provider_node, slot_name, replication_sets
FROM pglogical.show_subscription_status();
 subscription_name |   status    | provider_node |              slot_name              | replication_sets 
-------------------+-------------+---------------+-------------------------------------+------------------
 bdrgroup_node2    | replicating | node2         | pgl_regression_node2_bdrgroup_node2 | {bdrgroup}
(1 row)

SET client_min_messages = notice;
-- Wait for it to start up
-- We already created the slots so all we have to do here is wait for
-- the slots to be in sync once we do some WAL-logged work on the
-- upstreams.
CREATE TABLE throwaway AS SELECT 1;
\c :node2_dsn
CREATE TABLE throwaway AS SELECT 1;
\c :node1_dsn
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT application_name, sync_state
FROM pg_stat_replication
ORDER BY application_name;
 application_name | sync_state 
------------------+------------
 bdrgroup_node1   | async
 bdrgroup_node2   | async
(2 rows)

SELECT slot_name, plugin, slot_type, database, temporary, active
FROM pg_replication_slots ORDER BY slot_name;
              slot_name              |  plugin   | slot_type |  database  | temporary | active 
-------------------------------------+-----------+-----------+------------+-----------+--------
 pgl_postgres_node1_bdrgroup_node1   | pglogical | logical   | regression | f         | t
 pgl_regression_node2_bdrgroup_node2 | pglogical | logical   | postgres   | f         | t
(2 rows)

SELECT
    backend_type,
    regexp_replace(application_name, '[[:digit:]]', 'n', 'g') AS appname
FROM pg_stat_activity
WHERE application_name LIKE 'pglogical%'
ORDER BY appname;
   backend_type    |               appname               
-------------------+-------------------------------------
 background worker | pglogical manager nnnnn
 background worker | pglogical manager nnnnn
 background worker | pglogical receiver nnnnn:nnnnnnnnnn
 background worker | pglogical receiver nnnnn:nnnnnnnnnn
 background worker | pglogical supervisor
(5 rows)

