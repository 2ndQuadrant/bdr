\c regression
-- Create a funnily named table and sequence for use during node
-- part testing.
CREATE SCHEMA "some $SCHEMA";
CREATE TABLE "some $SCHEMA"."table table table" ("a column" integer);
-- Also for dependency testing, a global sequence if supported
DO LANGUAGE plpgsql $$
BEGIN
  IF bdr.have_global_sequences() THEN
    EXECUTE $DDL$CREATE SEQUENCE "some $SCHEMA"."some ""sequence"" name" USING bdr;$DDL$;
  END IF;
END;
$$;
-- Dropping the BDR extension isn't allowed while BDR is active
DROP EXTENSION bdr;
ERROR:  Dropping the BDR extension is prohibited while BDR is active
HINT:  Part this node with bdr.part_by_node_names(...) first, or if appropriate use bdr.remove_bdr_from_local_node(...)
-- Initial state
SELECT node_name, node_status FROM bdr.bdr_nodes ORDER BY node_name;
    node_name    | node_status 
-----------------+-------------
 node-pg         | r
 node-regression | r
(2 rows)

-- You can't part your own node
SELECT bdr.bdr_part_by_node_names(ARRAY['node-regression']);
ERROR:  cannot part a node from its self
DETAIL:  Attempted to bdr_part_by_node_names(...) on node node-regression which is one of the nodes being parted
HINT:  You must call call bdr_part_by_node_names on a node that is not being removed
-- Or a nonexistent node
SELECT bdr.bdr_part_by_node_names(ARRAY['node-nosuch']);
ERROR:  No node(s) named node-nosuch found
-- Unsubscribe must also fail, since this is a BDR connection
SELECT bdr.bdr_unsubscribe('node-pg');
ERROR:  bdr unidirectional subscriptions no longer supported, use pglogical
-- Nothing has changed
SELECT node_name, node_status FROM bdr.bdr_nodes ORDER BY node_name;
    node_name    | node_status 
-----------------+-------------
 node-pg         | r
 node-regression | r
(2 rows)

-- This part should successfully remove the node
SELECT bdr.bdr_part_by_node_names(ARRAY['node-pg']);
 bdr_part_by_node_names 
------------------------
 
(1 row)

SELECT bdr.bdr_is_active_in_db();
 bdr_is_active_in_db 
---------------------
 t
(1 row)

-- Wait 'till all connections gone...
DO
$$
DECLARE
    timeout integer := 60;
BEGIN
    WHILE timeout > 0
    LOOP
        IF (SELECT count(*) FROM pg_stat_replication) = 0 THEN
            RAISE NOTICE 'All connections dropped';
            EXIT;
        END IF;
        PERFORM pg_sleep(1);
        PERFORM pg_stat_clear_snapshot();
        timeout := timeout - 1;
    END LOOP;
    IF timeout = 0 THEN
        RAISE EXCEPTION 'Timed out waiting for replication disconnect';
    END IF;
END;
$$
LANGUAGE plpgsql;
NOTICE:  All connections dropped
-- Wait 'till all slots gone
DO
$$
DECLARE
    timeout integer := 60;
BEGIN
    WHILE timeout > 0
    LOOP
        IF (SELECT count(*) FROM pg_replication_slots) = 0 THEN
            RAISE NOTICE 'All slots dropped';
            EXIT;
        END IF;
        PERFORM pg_sleep(1);
        PERFORM pg_stat_clear_snapshot();
        timeout := timeout - 1;
    END LOOP;
    IF timeout = 0 THEN
        RAISE EXCEPTION 'Timed out waiting for slot drop';
    END IF;
END;
$$
LANGUAGE plpgsql;
NOTICE:  All slots dropped
-- There should now be zero slots and no connections to them
SELECT pid, application_name, state, sent_location, write_location, flush_location, replay_location, sync_state  FROM pg_stat_replication;
 pid | application_name | state | sent_location | write_location | flush_location | replay_location | sync_state 
-----+------------------+-------+---------------+----------------+----------------+-----------------+------------
(0 rows)

SELECT slot_name, plugin, slot_type, datoid, database, active, xmin, catalog_xmin, restart_lsn, confirmed_flush_lsn FROM bdr.pg_replication_slots;
 slot_name | plugin | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn 
-----------+--------+-----------+--------+----------+--------+------+--------------+-------------+---------------------
(0 rows)

-- Zero active connections
SELECT count(*) FROM pg_stat_replication;
 count 
-------
     0
(1 row)

-- and the node state for the removed node should show 'k'
SELECT node_name, node_status FROM bdr.bdr_nodes ORDER BY node_name;
    node_name    | node_status 
-----------------+-------------
 node-pg         | k
 node-regression | r
(2 rows)

\c postgres
-- ... on both nodes.
SELECT node_name, node_status FROM bdr.bdr_nodes ORDER BY node_name;
    node_name    | node_status 
-----------------+-------------
 node-pg         | k
 node-regression | r
(2 rows)

\c regression
-- If we try to part the same node again its state won't be 'r'
-- so a warning will be generated.
SELECT bdr.bdr_part_by_node_names(ARRAY['node-pg']);
INFO:  Node node-pgi is already parted, ignoring
 bdr_part_by_node_names 
------------------------
 
(1 row)

-- BDR is parted, but not fully removed, so don't allow the extension
-- to be dropped yet.
DROP EXTENSION bdr;
ERROR:  Dropping the BDR extension is prohibited while BDR is active
HINT:  Part this node with bdr.part_by_node_names(...) first, or if appropriate use bdr.remove_bdr_from_local_node(...)
SELECT bdr.bdr_is_active_in_db();
 bdr_is_active_in_db 
---------------------
 t
(1 row)

-- Strip BDR from this node entirely and convert global sequences to local.
SELECT bdr.remove_bdr_from_local_node(true, true);
WARNING:  forcing deletion of possibly active BDR node
NOTICE:  node forced to parted state, now removing
NOTICE:  removing BDR from node
NOTICE:  BDR removed from this node. You can now DROP EXTENSION bdr and, if this is the last BDR node on this PostgreSQL instance, remove bdr from shared_preload_libraries.
 remove_bdr_from_local_node 
----------------------------
 
(1 row)

SELECT bdr.bdr_is_active_in_db();
 bdr_is_active_in_db 
---------------------
 f
(1 row)

-- Should be able to drop the extension now
--
-- This would cascade-drop any triggers that we hadn't already
-- dropped in remove_bdr_from_local_node()
--
DROP EXTENSION bdr;
