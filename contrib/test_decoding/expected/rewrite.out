CREATE EXTENSION test_decoding;
-- predictability
SET synchronous_commit = on;
DROP TABLE IF EXISTS replication_example;
SELECT 'init' FROM pg_create_decoding_replication_slot('regression_slot', 'test_decoding');
 ?column? 
----------
 init
(1 row)

CREATE TABLE replication_example(id SERIAL PRIMARY KEY, somedata int, text varchar(120));
INSERT INTO replication_example(somedata) VALUES (1);
SELECT data FROM pg_decoding_slot_get_changes('regression_slot', 'now', 'include-xids', '0');
                                         data                                          
---------------------------------------------------------------------------------------
 BEGIN
 COMMIT
 BEGIN
 table "replication_example": INSERT: id[int4]:1 somedata[int4]:1 text[varchar]:(null)
 COMMIT
(5 rows)

BEGIN;
INSERT INTO replication_example(somedata) VALUES (2);
ALTER TABLE replication_example ADD COLUMN testcolumn1 int;
INSERT INTO replication_example(somedata, testcolumn1) VALUES (3,  1);
COMMIT;
BEGIN;
INSERT INTO replication_example(somedata) VALUES (3);
ALTER TABLE replication_example ADD COLUMN testcolumn2 int;
INSERT INTO replication_example(somedata, testcolumn1, testcolumn2) VALUES (4,  2, 1);
COMMIT;
VACUUM FULL pg_am;
VACUUM FULL pg_amop;
VACUUM FULL pg_proc;
VACUUM FULL pg_opclass;
VACUUM FULL pg_type;
VACUUM FULL pg_index;
VACUUM FULL pg_database;
-- repeated rewrites that fail
BEGIN;
CLUSTER pg_class USING pg_class_oid_index;
CLUSTER pg_class USING pg_class_oid_index;
ROLLBACK;
-- repeated rewrites that succeed
BEGIN;
CLUSTER pg_class USING pg_class_oid_index;
CLUSTER pg_class USING pg_class_oid_index;
CLUSTER pg_class USING pg_class_oid_index;
COMMIT;
 -- repeated rewrites in different transactions
VACUUM FULL pg_class;
VACUUM FULL pg_class;
INSERT INTO replication_example(somedata, testcolumn1) VALUES (5, 3);
BEGIN;
INSERT INTO replication_example(somedata, testcolumn1) VALUES (6, 4);
ALTER TABLE replication_example ADD COLUMN testcolumn3 int;
INSERT INTO replication_example(somedata, testcolumn1, testcolumn3) VALUES (7, 5, 1);
COMMIT;
-- make old files go away
CHECKPOINT;
SELECT data FROM pg_decoding_slot_get_changes('regression_slot', 'now', 'include-xids', '0');
                                                                          data                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------
 BEGIN
 table "replication_example": INSERT: id[int4]:2 somedata[int4]:2 text[varchar]:(null)
 table "replication_example": INSERT: id[int4]:3 somedata[int4]:3 text[varchar]:(null) testcolumn1[int4]:1
 COMMIT
 BEGIN
 table "replication_example": INSERT: id[int4]:4 somedata[int4]:3 text[varchar]:(null) testcolumn1[int4]:(null)
 table "replication_example": INSERT: id[int4]:5 somedata[int4]:4 text[varchar]:(null) testcolumn1[int4]:2 testcolumn2[int4]:1
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 COMMIT
 BEGIN
 table "replication_example": INSERT: id[int4]:6 somedata[int4]:5 text[varchar]:(null) testcolumn1[int4]:3 testcolumn2[int4]:(null)
 COMMIT
 BEGIN
 table "replication_example": INSERT: id[int4]:7 somedata[int4]:6 text[varchar]:(null) testcolumn1[int4]:4 testcolumn2[int4]:(null)
 table "replication_example": INSERT: id[int4]:8 somedata[int4]:7 text[varchar]:(null) testcolumn1[int4]:5 testcolumn2[int4]:(null) testcolumn3[int4]:1
 COMMIT
(35 rows)

SELECT pg_drop_replication_slot('regression_slot');
 pg_drop_replication_slot 
--------------------------
 
(1 row)

DROP TABLE IF EXISTS replication_example;
DROP EXTENSION test_decoding;
