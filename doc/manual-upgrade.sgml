<chapter id="upgrade" xreflabel="Upgrading BDR">
 <title>Upgrading &bdr;</title>
 <indexterm>
  <primary>Upgrading BDR</primary>
 </indexterm>

 <sect1>
  <title>Upgrading BDR 1.0 to BDR 2.0 and Postgres-BDR 9.4 to PostgreSQL 9.6</>

  <para>
   Users of BDR 1.0 running on Postgres-BDR 9.4 should upgrade to BDR 2.0 on
   Postgres-BDR 9.4, and then to BDR 2.0 on PostgreSQL 9.6.
  </para>

  <important>
   <para>
    Do not attempt to upgrade from BDR 1.0 on Postgres-9.4 directly to BDR 2.0
    on PostgreSQL 9.6. It will not work. There is no support for
    <application>pg_upgrade</>'ing Postgres-9.4 to PostgreSQL 9.6, the data
    directories are not compatible, and BDR 2.0 cannot join a BDR 1.0 group.
    You must upgrade via BDR 2.0 on Postgres-BDR 9.4.
   </para>
  </important>

  <sect2>
   <title>Offline upgrade</>

   <para>
    If your deployment does not use BDR 1.0 global sequences, or you plan to adjust
    your sequence setup after you upgrade to BDR 2.0 on 9.6, you can perform a direct
    offline upgrade from BDR 1.0 on 9.4 to BDR 2.0 on 9.6 using a dump and reload.
   </para>

   <important>
    <para>
     To check if you are using BDR 1.0 global sequences, see <xref
     linkend="global-sequences-10-check">.
    </para>
   </important>

   <para>
    To prepare to upgrade, first tear down BDR and restore your system to a
    single standalone node using <link
    linkend="node-management-disabling"><function>bdr.remove_bdr_from_local_node()</></>.
    Make sure you <literal>DROP EXTENSION bdr;</> and remove <literal>bdr</>
    from <literal>shared_preload_libraries</> and restart the PostgreSQL instance.
   </para>

   <para>
    Then, like any other nontrivial server migration by dump and reload, you should
    <literal>pg_dumpall --globals-only</> then <literal>pg_dump -Fc</> each
    database you wish to migrate. Restore them into PostgreSQL 9.6, 
   </para>

   <important>
    <para>
     If you use a dump and reload to upgrade, use the <application>pg_dump</>
     and <application>pg_restore</> from PostgreSQL 9.6, <emphasis>not</> the
     ones from Postgres-BDR 9.4.
    </para>
   </important>

   <para>
    Once your database is restored to PostgreSQL 9.6, bring up BDR as if this
    were a new setup, join new nodes, then make any required fixes to your
    sequences such as switching <literal>DEFAULT</>s on your tables to use
    <link linkend="global-sequences">bdr.global_seq_nextval(...)</> or setting
    up step/offset sequences on your nodes.
   </para>

  </sect2>

  <sect2>
   <title>Online upgrade</>

   <sect3>
    <title>Upgrading BDR 1.0 to BDR 2.0 on Postgres-BDR 9.4</>

    <para>
     The BDR 1.0 to 2.0 upgrade on Postgres-BDR 9.4 should be performed as a
     simple in-place upgrade of the BDR extension. It is necessary that all
     nodes be upgraded at roughly the same time, because the 1.0 and 2.0
     catalogs are not entirely compatible so nodes cannot part or join while the
     BDR group contains a mixture of 1.0 and 2.0 nodes, DDL replication won't
     work, etc.
    </para>

    <para>
     If a user or application attempts to enqueue DDL from a 1.0 node after some
     nodes have been upgraded to 2.0, the 2.0 nodes will be unable to replay the
     DDL. To protect against this it is <emphasis>strongly</> recommended that
     the option <link
     linkend="guc-bdr-permit-ddl-locking"><literal>bdr.permit_ddl_locking =
     on</></> be set in <literal>postgresql.conf</> so that attempts to execute
     DDL will fail. Don't forget to <literal>SELECT pg_reload_conf()</>
     or <literal>pg_ctl reload</> after changing the setting.
    </para>

    <para>
     It is not necessary to actually shut down each node prior to upgrading the
     BDR packages or install BDR 2.0 from source code. The new extension can be
     installed "live". However, each node <emphasis>must</> be restarted after
     installing BDR 2.0. Do <emphasis>not</> try to <literal>ALTER EXTENSION bdr
     UPDATE</>; BDR will do that for its self when it starts up again and
     notices the upgrade.
    </para>

    <para>
     A mixed BDR 1.0 and BDR 2.0 group can be operated safely for a transition
     period so long as no nodes need to part or join, and no DDL needs to be
     performed. (It is <emphasis>not</> safe to mix in 2.0 nodes running on
     PostgreSQL 9.6 if global sequences are in use, though).
    </para>

    <para>
     There is no support for BDR 2.0 nodes joining a 1.0 group or vice versa.
     If you require such support it is possible to add it as an update to BDR
     1.0.  <ulink url="http://2ndquadrant.com">Contact 2ndQuadrant</> if this
     important to your business.
    </para>

   </sect3>

   <sect3>
    <title>Converting global sequences</>

    <para>
     BDR 1.0-style global sequences, created with the <literal>USING bdr</>
     syntax to <literal>CREATE SEQUENCE</>, are <emphasis>not</> supported by
     BDR 2.0 on PostgreSQL 9.6. Nor are they likely to be supported by future
     PostgreSQL releases, as the underlying functionality required to intercept
     sequence operations and redirect them was not incorporated into community
     PostgreSQL.
    </para>

    <para>
     BDR 2.0 continues to support BDR 1.0-style global sequences on BDR-Postgres
     9.4. However, users are advised to convert to BDR 2.0 global sequences
     because unlike the 1.0-style sequences they are immune to network partition
     related faults and they cannot suffer temporary exhaustion when consumed
     too fast. There are downsides too, so make sure to read the
     <link linkend="global-sequences">global sequences</> chapter.
     <emphasis>Application changes or configuration may be necessary.</>
    </para>

    <para>
     BDR 2.0 global sequences require <literal>bigint</> storage. So the first
     step is to widen any <type>integer</> columns to <type>bigint</>. This
     requires multiple steps and <emphasis><link
     linkend="ddl-replication-restricted-commands">cannot be done with
     <literal>ALTER TABLE ... ALTER COLUMN ... TYPE ...</></link></emphasis>.
     See <xref linkend="ddl-replication-alter-type">. Alternately, you may
     choose to <link linkend="global-sequences-alternatives">use step/offset
     sequences</>, which do not require <type>bigint</> storage, but need manual
     setup when nodes are added or removed.
    </para>

    <para>
     BDR 2.0 global sequences use a time-based generation algorithm. The start
     values are not directly configurable, but will be greater than any likely
     allocations from BDR 1.0 sequences in all but the most extreme cases.
     Check to make sure your tables do not contain values greater than those
     returned by the new sequences. If they do, you may need to use an
     alternative method of sequence generation.
    </para>

    <para>
     For each BDR 1.0 sequence, begin a transaction and
     <programlisting>
     LOCK TABLE table_with_sequence IN EXCLUSIVE MODE;
     ALTER SEQUENCE the_sequence USING local;
     ALTER SEQUENCE the_sequence RESTART WITH 1;
     ALTER TABLE table_with_sequence ALTER COLUMN column_with_sequence DEFAULT bdr.global_seq_nextval('the_sequence');
     </programlisting>
     then commit.
    </para>

    <important>
     <para>
      Verify that the new values generated by
      <function>bdr.global_seq_nextval</> are greater than any that currently
      exist in the table before resuming normal operation. Make sure the
      application does not directly call <function>nextval</> on the sequence,
      and that no other <literal>DEFAULT</>s elsewhere refer to the sequence.
     </para>
    </important>

   </sect3>

   <sect3>
    <title>Online-upgrading BDR 2.0 from Postgres-BDR 9.4 to PostgreSQL 9.6</title>

    <para>
     When all nodes are running BDR 2.0 on Postgres-BDR 9.4 and all use of
     BDR 1.0 global sequences has been retired, it is possible to upgrade
     BDR to run on PostgreSQL 9.6. The PostgreSQL version upgrade is an online
     upgrade performed while the BDR group continues to process normal loads -
     but DDL should be avoided if possible.
    </para>

    <warning>
     <para>
      A BDR 2.0 instance running on PostgreSQL 9.6 will refuse to join a
      BDR-Postgres 9.4 based group if any BDR 1.0 global sequences are found.
      Make sure you convert your sequences first.
     </para>
    </warning>

    <para>
     There is no <application>pg_upgrade</> support for upgrading Postgres-BDR
     9.4 to PostgreSQL 9.6. Upgrades are accomplished by joining new 9.6-based
     BDR nodes to the BDR group, then parting the old 9.4-based nodes.
    </para>

    <para>
     DDL performed on 9.6 nodes may not apply correctly on 9.4 nodes, since new
     features have been added to PostgreSQL 9.6. For that reason it is
     recommended that <emphasis>at least</> on the 9.6 nodes, <link
     linkend="guc-bdr-permit-ddl-locking"><literal>bdr.permit_ddl_locking =
     on</></> is set until the last 9.4 node has been parted.
    </para>

    <para>
     Because <application>bdr_init_replica</> does a physical copy with
     <application>pg_basebackup</> it cannot be used to join the first 9.6 node
     to a running 9.4 BDR group. A logical join using <link
     linkend="function-bdr-group-join"><function>bdr.bdr_group_join</></> must
     be performed. See <xref linkend="node-management-joining">.
    </para>

    <para>
     Once the first 9.6 node is joined, subsequent 9.6 nodes may be added to
     replace 9.4 nodes either by using <function>bdr.bdr_group_join</> targeting
     any node (9.4 or 9.6), or by using <application>bdr_init_copy</> targeting
     a 9.6 node. Which is the best choice for you depends on your network.
    </para>

    <para>
     An upgrade may be done on a rolling basis, by adding a 9.6 node then
     removing the corresponding 9.4 node. Or it may be done by adding all 9.6
     nodes then parting all 9.4 nodes. Which is the best choice depends on your
     network.
    </para>

    <para>
     It may be possible to add <application>pg_upgrade</> support for upgrading
     Postgres-BDR 9.4 to PostgreSQL 9.6 in-place. If this is important for your
     deployment, please <ulink url="http://2ndquadrant.com">contact
     2ndQuadrant</>.
    </para>

   </sect3>

  </sect2>

 </sect1>

 <sect1>
  <title>Upgrading BDR 0.9.x to 1.0</title>

  <para>
   Users of PostgreSQL 0.9.x should upgrade to 1.0 before upgrading to 2.0.
   A direct upgrade from 0.9.x to 2.0 should work but is not tested as part of
   the BDR QA process.
  </para>

  <para>
   For upgrade instructions see the 1.0 manual.
  </para>

 </sect1>

 <sect1>
  <title>Upgrading 0.8.x to 1.0</title>

  <para>
   First, upgrade to 0.9.3, then follow the 0.9.3 to 1.0.0 upgrade steps given above.
   See the manual for 0.9.3 for upgrade steps.
  </para>

 </sect1>

</chapter>
