<chapter id="node-management" xreflabel="Node management">
 <title>Node Management</title>

 <indexterm>
  <primary>Node Management</primary>
 </indexterm>

 <sect1 id="node-management-joining" xreflabel="Joining or subscribing a node">
  <title>Joining or subscribing a node</title>

  <para>
   When a new &bdr; node is joined to an existing &bdr; group,
   node is subscribed to an upstream peer, the system must copy
   the existing data from the peer node(s) to the local node before
   replication can begin. This copy has to be carefully co-ordinated
   so that the local and remote data starts out <emphasis>identical</emphasis>,
   so it's not sufficient to just use <application>pg_dump</application>
   yourself. The extension provides built-in facilities for making
   this initial copy.
  </para>

  <para>
   There are two ways to join a new &bdr; node: logical or physical copy.
   After the initial copy is done there is no
   significant difference between physical or logical initialization of a &bdr;
   node, so the choice is down to which setup method will be quickest and
   easiest for your particular needs.
  </para>

  <para>
   In a logical copy, a blank database in an existing standalone PostgreSQL
   instance is enabled for &bdr; via <acronym>SQL</acronym>
   functions calls. The &bdr; extension makes a connection to an upstream
   node designated by the user and takes a schema and data dump of that node.
   The dump is then applied to the local blank database before replication
   begins. Only the specified database is copied. With a logical copy you don't
   have to create new init scripts, run separate instances on separate ports,
   etc, as everything happens in your existing PostgreSQL instance.
  </para>

  <para>
   In a physical copy, the <xref linkend="command-bdr-init-copy"> is used
   to clone a user-designated upstream node. This clone is then reconfigured
   and started up as a new node before replication begins. All databases
   on the remote node are copied, though only the specified database is
   initially activated for &bdr;. (Support for multiple database
   join may be added at a later date). After a physical node
   join or subscribe the admin will generally need to separately register
   the new PostgreSQL instance with the operating system to auto-start,
   as PostgreSQL does not do this automatically. You may also need to
   select a different PostgreSQL port if there is already a local PostgreSQL
   instance.
  </para>

  <para>
   The advantages and disadvantages of each approach roughly mirror those
   of a logical backup using <application>pg_dump</application> and
   <application>pg_restore</application> vs a physical copy using
   <application>pg_basebackup</application>. See the
   <ulink url="http://www.postgresql.org/docs/current/static/backup.html">
   PostgreSQL documentation on backup and restore</ulink> for more
   information.
  </para>

  <para>
   In general it's more convenient to use logical join when you have an
   existing PostgreSQL instance, a reasonably small database, and other
   databases you might not also want to copy/replicate.  Physical join is more
   appropriate for big databases that are the only database in a given
   PostgreSQL install.
  </para>

  <para>
   For the details, see <xref linkend="node-management-joining-bdr">.
  </para>

  <sect2 id="node-management-joining-bdr" xreflabel="Joining or creating a BDR node">
   <title>Joining or creating a &bdr; node</title>

   <note>
    <para>
     Read <xref linkend="node-management-joining"> before this section.
    </para>
   </note>

   <para>
    For &bdr; every node has to have a connection to every other node. To make
    configuration easy, when a new node joins it automatically configures all
    existing nodes to connect to it. For this reason, every node, including
    the first &bdr; node created, must know the PostgreSQL connection string
    (sometimes referred to as a <acronym>DSN</acronym>) that other nodes
    can use to connect to it.
   </para>

   <para>
    The SQL function <xref linkend="function-bdr-group-create">
    is used to create the first node of a &bdr; cluster from a standalone
    PostgreSQL database. Doing so makes &bdr; active on that
    database and allows other nodes to join the &bdr; cluster (which
    consists out of one node at that point). You must specify the
    connection string that other nodes will use to connect to this
    node at the time of creation.
   </para>

   <para>
    Whether you plan on using logical or physical copy to join
    subsequent nodes, the first node must always be created
    using <xref linkend="function-bdr-group-create">.
   </para>

   <para>
    Once the initial node is created every further node can join the &bdr;
    cluster using the <xref linkend="function-bdr-group-join"> function
    or using <xref linkend="command-bdr-init-copy">.
   </para>

   <para>
    Either way, when joining you must nominate a single node that is already a
    member of the &bdr; group as the join target. This node's contents are
    copied to become the initial state of the newly joined node. The new node
    will then synchronise with the other nodes to ensure it has the same
    contents as the others.
   </para>

   <para>
    Generally you should pick whatever node is closest to the new node in
    network terms as the join target.
   </para>

   <para>
    Which node you choose to copy only really matters if you are using
    non-default <xref linkend="replication-sets">. See the replication
    sets documentation for more information on this.
   </para>

   <para>
    See also: <xref linkend="functions-node-mgmt">, <xref linkend="command-bdr-init-copy">.
   </para>

  </sect2>

 </sect1>

 <sect1 id="node-management-removing" xreflabel="Removing a node">
  <title>Removing a node</title>

  <para>
   Because &bdr; can recover from extended node outages it is
   necessary to explicitly tell the system if you are removing a node
   permanently. If you permanently shut down a node and don't tell
   the other nodes then performance will suffer and eventually
   the whole system will stop working.
  </para>

  <para>
   Each node saves up change information (using one
   <ulink url="http://www.postgresql.org/docs/current/static/logicaldecoding-explanation.html">
   replication slot</ulink> for each peer node) so it can replay changes to a
   temporarily unreachable node. If a peer node remains offline indefinitely
   this accumulating change information will cause the node to run out of
   storage space for PostgreSQL transaction logs (<acronym>WAL</acronym>, in
   <filename>pg_xlog</filename>), likely causing the database server to shut
   down with an error like:
   <programlisting>
    PANIC: could not write to file "pg_xlog/xlogtemp.559": No space left on device
   </programlisting>
   or report other out-of-disk related symptoms.
  </para>

  <note>
   <para>
    Administrators should monitor for node outages (see: <xref
    linkend="monitoring"> and make sure nodes have sufficient free disk space.
   </para>
  </note>

  <para>
   A node is removed with the <xref linkend="function-bdr-part-by-node-names">
   function. You must specify the node name (as passed during node creation)
   to remove a node. You should call <literal>bdr.bdr_part_by_node_names</literal>
   from a node that will remain in the BDR group, not the node to be removed. Multiple
   nodes may be removed at once. No value is returned; the removal status may
   be seen by checking the <literal>status</literal> field in
   <literal>bdr.bdr_nodes</literal> for that node.
  </para>

  <para>
   To remove <literal>node1</literal>:
   <programlisting>
    SELECT bdr.bdr_part_by_node_names(ARRAY['node-1']);
   </programlisting>
   or to remove multiple nodes at once:
   <programlisting>
    SELECT bdr.bdr_part_by_node_names(ARRAY['node-1', 'node-2', 'node-3']);
   </programlisting>
  </para>

  <para>
   If you only know the slot name from <literal>pg_replication_slots</literal>
   and not the node name from <literal>bdr.bdr_nodes</literal> you can either
   <literal>SELECT</literal> <xref linkend="functions-bdr-get-local-node-name">
   on the node you plan to remove, or look it up from the slot name using
   <!-- TODO make this a proper xref -->
   the <literal>bdr.bdr_node_slots</literal> view.
  </para>

 </sect1>

 <sect1 id="node-management-disabling" xreflabel="Turning a BDR node back into a normal database">
  <title>Removing a node</title>

  <para>
   To take a BDR node that has already been parted, or one that has been
   restored from a base backup, and turn it back into a normal PostgreSQL
   database you may use the
   <xref linkend="function-bdr-remove-bdr-from-local-node"> function.
  </para>

  <para>
   After running <literal>bdr.remove_bdr_from_local_node()</literal> it is safe
   to <literal>DROP EXTENSION bdr;</literal>. At this point all BDR-specific
   elements will have been removed from the local database and it may be used
   as a standalone database. Global sequences are converted into local
   sequences and may be used normally. All BDR triggers, event triggers,
   security labels, slots, replication identifiers etc are removed from
   the local node.
  </para>
   
  <para>
   Alternately, after <literal>bdr.remove_bdr_from_local_node()</literal>, it
   is possible to <xref linkend="function-bdr-group-create">
   a new BDR group with this database as the starting node. The new group will
   be completely independent from the existing group.
  </para>
  <warning>
   <para>
    Note that
    local sequences are <emphasis>not</emphasis> converted back to global sequences when a new node
    group is created. If converted using
    <programlisting>
    ALTER SEQUENCE ... USING bdr;
    </programlisting>
    the sequence will <emphasis>not</emphasis> restart at the old local sequence
    startpoint. Nor can you use <function>setval(...)</function> to advance it.
    It is currently necessary to use a script to call <function>nextval()</function>
    repeatedly until the desired value is reached. (See github #215).
   </para>
  </warning>

  <para>
   If BDR thinks it's still joined with an existing node group then
   <literal>bdr.remove_bdr_from_local_node()</literal> will refuse to run as a
   safety measure to prevent inconsistently removing a running node.
  </para>

  <para>
   If you are sure the node has really been parted from its group or is a
   duplicate copy of a node that's still running normally, you may force
   removal by calling <literal>bdr.remove_bdr_from_local_node(true)</literal>.
   Do <emphasis>not</emphasis> do so unless you're certain the node you're
   running it on is already isolated from the group - say, if it's been parted
   while disconnected, or has been restored from a PITR backup or disk
   snapshot. Otherwise you will leave dangling replication slots etc on the
   other nodes, causing problems on the remaining nodes. Always <xref
   linkend="function-bdr-part-by-node-names"> the node first.
  </para>

 </sect1>
</chapter>
