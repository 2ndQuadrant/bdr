<!-- doc/src/sgml/postgres.sgml -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.2//EN" [

          <!ENTITY % version SYSTEM "version.sgml">
          %version;

          <!ENTITY % filelist SYSTEM "filelist.sgml">
          %filelist;

]>

<book id="bdr">
 <title>BDR Documentation</title>

 <bookinfo>
  <corpauthor>The PostgreSQL Global Development Group</corpauthor>
  <productname>BDR</productname>
  <productnumber>&bdrversion;</productnumber>
  &legal;
 </bookinfo>

 <preface id="preface">
  <title>Preface</title>

  <para>
   This book is the official documentation of
   <productname>BDR</productname> &bdrversion; for use with
   &pgmajorversion;. It has been written by the
   <productname>PostgreSQL</productname>
   and <productname>BDR</productname> developers and other volunteers
   in parallel to the development of the
   <productname>BDR</productname> software.  It describes all
   the functionality that the current version of
   <productname>BDR</productname> officially supports.
  </para>
 </preface>
 <part id="quickstart">
  <title>Quick Start</title>

  <partintro>
   <para>
    This chapter gives a quick introduction into setting up
    a <productname>BDR</productname> installation.
   </para>
   <para>
    These instructions are not suitable for a production install, as
    they neglect security considerations, proper system administration
    procedure, etc. If you're trying to set up a production <productname>BDR</productname>
    install, read the rest of the <productname>BDR</productname> manual.
   </para>
  </partintro>

  <chapter id="quickstart-start">
   <title>Getting Started</title>

   <sect1 id="quickstart-overviev">
    <title>Overview</title>
    <para>
To set up BDR you'll need to: ...
    </para>
   </sect1>

   <sect1 id="quickstart-source">
    <title>Installing from source</title>
    <para>
      Compiling PostgreSQL with BDR ...
    </para>
   </sect1>
  </chapter>
 </part>

 <part id="manual">
  <title>Main Manual</title>
  <partintro>
   <para>
    This chapter documents how to
    configure <productname>BDR</productname>
    and <productname>UDR</productname>'s.
   </para>
  </partintro>

  <chapter id="overview">
   <title>How does BDR work</title>
   <para>sup</para>
  </chapter>

  <chapter id="concepts">
   <title>Concepts</title>

   <sect1 id="ddl-replication">
    <indexterm>
     <primary>DDL replication</primary>
    </indexterm>
    <title>DDL Replication</title>

    <para>
     <productname>BDR</productname> supports replicating changes to
     a database's schemas to other connected nodes. That allows to
     quite easily make certain DDL changes without worrying about
     having to deploy them on other nodes first (which is not
     always possible).
    </para>

    <para>
     To safely manipulate the database schema in a asynchronous
     multimaster setup, all pending changes have to be replicated
     first. Otherwise it can e.g. happen that a column constains
     data for a row that has been dropped, or no data for a row
     that is marked NOT NULL. To handle that
     problem, <productname>BDR</productname> acquires a so called
     DDL lock the first time in a transaction schema changes are
     moade.
    </para>

    <para>
     Acquiring such a DDL locks requires contacting all nodes in a
     configiuration setup, asking them to replicate all pending
     changes, and prevent further changes from being made. Once all
     nodes are in that state, the originator of the DDL lock is
     free to perform schema changes.
    </para>

    <para>
     This means that schema changes, in contrary to data changes,
     can only be performed while all configured nodes are
     reachable. If DDL has to be performed while a node is down, it
     has to be removed from the configuration (using
     bdr.bdr_part_by_node_names <!-- FIXME: link once
                                     documented-->) first.
    </para>

    <sect2>
     <title>Statement specific DDL replication concerns</title>

     <para>
      Not all commands can be replicated automatically. Some are
      allowed regardless - generally ones that have affect on more
      than one database -, others are disallowed.
     </para>

     <para>
      The following DDL are not replicated:

      <variablelist>

       <varlistentry id="ddl-create-database">
        <term><varname>CREATE DATABASE</varname>
         <indexterm>
          <primary><varname>CREATE DATABASE</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>CREATE DATABASE</literal> cannot be
          replicated because <productname>BDR</productname>
          works on a per database level.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-create-role">
        <term><varname>CREATE ROLE/USER/GROUP</varname>
         <indexterm>
          <primary><varname>CREATE ROLE</varname></primary>
         </indexterm>
         <indexterm>
          <primary><varname>CREATE USER</varname></primary>
         </indexterm>
         <indexterm>
          <primary><varname>CREATE GROUP</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>CREATE ROLE</literal> cannot be replicated
          because <productname>BDR</productname> works on a
          per database level. It is possible that a workaround
          for this will be added.
         </para>
         <warning>
          <para>
           Not creating roles of the same name (not
           necessarily with the same access details otherwise
           though) on all systems can break replication when
           statements like <literal>ALTER TABLE ...
            OWNER TO</literal> are replicated.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-create-tablespace">
        <term><varname>CREATE TABLESPACE</varname>
         <indexterm>
          <primary><varname>CREATE TABLESPACE</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>CREATE TABLESPACE</literal> cannot be
          replicated because <productname>BDR</productname>
          works on a per database level.
         </para>
         <warning>
          <para>
           Not creating tablespaces of the same name (not
           necessarily with the same location though) on all
           systems can break replication when statements
           like <literal>ALTER TABLE ... SET
            TABLESPACE</literal> are replicated.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-drop-database">
        <term><varname>DROP DATABASE</varname>
         <indexterm>
          <primary><varname>DROP DATABASE</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>DROP DATABASE</literal> cannot be
          replicated because <productname>BDR</productname>
          works on a per database level.
         </para>
         <para>
          Note that a database that is configured for BDR
          cannot be dropped while that is the case.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-drop-tablespace">
        <term><varname>DROP TABLESPACE</varname>
         <indexterm>
          <primary><varname>DROP TABLESPACE</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>DROP TABLESPACE</literal> cannot be
          replicated because <productname>BDR</productname>
          works on a per database level.
         </para>
         <warning>
          <para>
           Dropping tablespaces only on some nodes can cause
           problems when relations on other nodes are moved
           into the tablespace that does not exist locally
           anymore.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-drop-role">
        <term><varname>DROP ROLE/USER/GROUP</varname>
         <indexterm>
          <primary><varname>DROP ROLE</varname></primary>
         </indexterm>
         <indexterm>
          <primary><varname>DROP USER</varname></primary>
         </indexterm>
         <indexterm>
          <primary><varname>DROP GROUP</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>DROP ROLE</literal> cannot be replicated
          because <productname>BDR</productname> works on a
          per database level. It is possible that a workaround
          for this will be added.
         </para>
         <warning>
          <para>
           Dropping role only on some nodes can cause
           problems when objects on other nodes are assigned
           to roles that do not exist locally anymore.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-alter-role">
        <term><varname>ALTER ROLE/USER/GROUP</varname>
         <indexterm>
          <primary><varname>ALTER ROLE</varname></primary>
         </indexterm>
         <indexterm>
          <primary><varname>ALTER USER</varname></primary>
         </indexterm>
         <indexterm>
          <primary><varname>ALTER GROUP</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>ALTER ROLE</literal> cannot be replicated
          because <productname>BDR</productname> works on a
          per database level. It is possible that a workaround
          for this will be added.
         </para>
         <para>
          Normally all commands but <literal>ALTER ROLE
           ... RENAME TO ...</literal> should be safe to
          execute in the sense that doing so won't cause
          replication to break.
         </para>
         <warning>
          <para>
           Renaming a role only on some nodes can lead to
           problems due to replicated DDL statmeents not
           being able to execute anymore.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-alter-database">
        <term><varname>ALTER DATABASE</varname>
         <indexterm>
          <primary><varname>ALTER DATABASE</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>ALTER DATABASE</literal> cannot be replicated
          because <productname>BDR</productname> works on a
          per database level.
         </para>
         <para>
          In practice the primary problematic case is when trying to
          change settings on a per database basis using <literal>ALTER
          DATABASE ... SET ...</literal>, these have to be executed on
          every database for now.
         </para>
         <warning>
          <para>
           Renaming a database can lead to the connection
           information stored on some of the nodes not being
           valid anymore.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="ddl-alter-tablespace">
        <term><varname>ALTER TABLESPACE</varname>
         <indexterm>
          <primary><varname>ALTER TABLESPACE</varname></primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          <literal>ALTER TABLSPACE</literal> cannot be replicated
          because <productname>BDR</productname> works on a per
          database level. It is safe to execute on the individual
          nodes though.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>
     </para>
    </sect2>
   </sect1>


   <sect1 id="distributed-sequences">
    <indexterm>
     <primary>distributed sequences</primary>
    </indexterm>
    <title>distributed sequences</title>
    <para>
     In a asynchronous multimaster environment it can be hard to
     have generated surrogate keys without a chance of
     conflicts. Possible solutions includee using random
     identifiers (like UUIDs) and assigning large ranges of values
     to individual nodes.
    </para>

    <para>
     <productname>BDR</productname> provides distributed sequences
     as a solution for that problem, without preventing
     implementation of other solutions. These assign small ranges
     of values to individual nodes, which these than can hand out
     during inserts. To make usage of these as simple as possible
     all that has to be done to use these, in comparison to normal
     sequences, is to specify the <literal>USING bdr</literal>
     option when creating a sequence.
    </para>
   </sect1>
  </chapter>

  <chapter id="settings">
   <title>Settings for BDR</title>

   <indexterm>
    <primary>configuration</primary>
    <secondary>of the server</secondary>
   </indexterm>

   <sect1 id="settings-prerequisite">
    <title>Prerequisite postgres parameters</title>

    <para>
     BDR and UDR require a couple of postgres settings to be set to
     specific values.
    </para>

    <para>
     <variablelist>

      <varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
       <term><varname>max_worker_processes</varname> (<type>integer</type>)
        <indexterm>
         <primary><varname>max_worker_processes</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         For both <productname>BDR</productname>
         and <productname>UDR</productname> this has to be set to a big
         enough value to have one worker per configured database, and
         one worker per connection.
        </para>
        <para>
         For more detailed information about this parameter consult
         the <productname>PostgreSQL</productname>
         <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES'>documentation</ulink>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
       <term><varname>max_replication_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_replication_slots</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         For both <productname>BDR</productname>
         and <productname>UDR</productname> this needs to be set big
         enough so that every connection to this node has a free
         replication slot.
        </para>
        <para>
         For more detailed information about this parameter consult
         the <productname>PostgreSQL</productname>
         <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-replication.html#GUC-MAX-REPLICATION-SLOTS'>documentation</ulink>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
       <term><varname>max_wal_senders</varname> (<type>integer</type>)
        <indexterm>
         <primary><varname>max_wal_senders</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         For both <productname>BDR</productname>
         and <productname>UDR</productname> this needs to be set big
         enough so that every connection to this node has a free wal
         sender process.
        </para>
        <para>
         If a node also does streaming base backups and/or base
         backups using <application>pg_basebackup</application>, the
         value needs to be big enough to accomodate both that
         and <productname>BDR</productname>/<productname>UDR</productname>.
        </para>

        <para>
         For more detailed information about this parameter consult
         the <productname>PostgreSQL</productname>
         <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-replication.html#GUC-MAX-WAL-SENDERS'>documentation</ulink>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        For both <productname>BDR</productname>
        and <productname>UDR</productname> this parameter has to to
        include <literal>bdr</literal> as one of the comma separated
        values. The parameter can only be changed at server start.
       </para>
       <para>
         For more detailed information about this parameter consult
         the <productname>PostgreSQL</productname>
         <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES'>documentation</ulink>.
       </para>
      </listitem>
      </varlistentry>

      <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
       <term><varname>track_commit_timestamp</varname> (<type>bool</type>)
        <indexterm>
         <primary><varname>track_commit_timestamp</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         To use <productname>BDR</productname> this parameter has to
         be set to <literal>true</literal>, it can
         be <literal>false</literal>
         for <productname>UDR</productname>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-wal-level" xreflabel="wal_level">
       <term><varname>wal_level</varname> (<type>enum</type>)
        <indexterm>
         <primary><varname>wal_level</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         For both <productname>BDR</productname>
         and <productname>UDR</productname> this parameter has to be
         set to <literal>logical</literal>.
        </para>

        <para>
         For more detailed information about this parameter consult
         the <productname>PostgreSQL</productname>
         <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-wal.html#GUC-WAL-LEVEL'>documentation</ulink>.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>
   </sect1>

   <sect1>
    <title><productname>BDR</productname>/<productname>BDR</productname> specific configuration variables</title>


    <para>
     <variablelist>

      <varlistentry id="guc-bdr-conflict-logging-include-tuples" xreflabel="bdr.conflict_logging_include_tuples">
       <term><varname>bdr.conflict_logging_include_tuples</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>bdr.conflict_logging_include_tuples</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         Log whole tuples when logging <productname>BDR</productname>
         tuples.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bdr-log-conflicts-to-table" xreflabel="bdr.log_conflicts_to_table">
       <term><varname>bdr.log_conflicts_to_table</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>bdr.log_conflicts_to_table</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         This boolean option controls whether
         detected <productname>BDR</productname> conflicts get logged
         to the bdr.bdr_conflict_history table. See Conflict logging
         for details. <!-- FIXME: Add link to not yet existing
                           conflict logging chapter-->
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bdr-synchronous-commit" xreflabel="bdr.synchronous_commit">
       <term><varname>bdr.synchronous_commit</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>bdr.synchronous_commit</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         This boolean option controls whether
         the <varname>synchronous_commit</varname> setting
         in <productname>BDR</productname>/<productname>UDR</productname>
         apply workers is enabled. It defaults
         to <literal>off</literal>.  If set to <literal>off</literal>,
         <productname>BDR</productname> apply workers will perform
         asynchronous commits,
         allowing <productname>PostgreSQL</productname> to
         considerably improve throughput.
        </para>
        <para>
         It it always is safe to set in the sense that it'll never
         cause transactions to not be replayed. If a minimal data loss
         window is desirable it's adviseable to set it
         to <literal>on</literal> and
         configure <productname>PostgreSQL</productname>'s synchronous
         replication.
        </para>
        <para>
         Using synchronous replication in combination
         with <varname>bdr.synchronous_commit</varname> disabled, is
         not generally adviseable, as it will noticeably increase the
         time until a transaction is confirmed to have been
         replicated. That's because it can only be reported as having
         safely committed once the <acronym>WAL</acronym> is flushed
         on the receiving side.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-temp-dump-directory" xreflabel="bdr.temp_dump_directory">
      <term><varname>bdr.temp_dump_directory</varname> (<type>string</type>)
        <indexterm>
         <primary><varname>bdr.temp_dump_directory</varname> configuration parameter</primary>
        </indexterm>
       </term>
       <listitem>
        <para>
         Specifies the path to a temporary storage location, writable
         by the postgres user, that needs to have enough storage space
         to contain a complete dump of the a potentially cloned
         database.
        </para>
        <para>
          Only used during initial bringup.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

    </para>

    <sect2>
     <title>Less common or internal configuration variables</title>
     <para>
      <variablelist>

       <varlistentry id="guc-bdr-default-apply-delay" xreflabel="bdr.default_apply_delay">
        <term><varname>bdr.default_apply_delay</varname> (<type>integer</type>)
         <indexterm>
          <primary><varname>bdr.default_apply_delay</varname> configuration parameter</primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          Sets a default apply delay for all configured connections
          that don't have a explicitly configured apply delay.
         </para>
         <para>
          This is primarily useful to simulate a high latency network
          in a low latency testing environment.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="guc-bdr-skip-ddl-locking" xreflabel="bdr.skip_ddl_locking">
        <term><varname>bdr.skip_ddl_locking</varname> (<type>boolean</type>)
         <indexterm>
          <primary><varname>bdr.skip_ddl_locking</varname> configuration parameter</primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          For <productname>BDR</productname> don't acquire the global
          schema lock when executing DDL statement. This primarily is
          used internally, but can also be used in other cases.  This
          option can be set at any time, but only by superusers.
         </para>
         <warning>
          <para>
           Inconsiderate usage of this option easily allows to break
           replication setups.
          </para>
         </warning>
        </listitem>
       </varlistentry>

       <varlistentry id="guc-bdr-permit-unsafe-ddl-commands" xreflabel="bdr.permit_unsafe_ddl_commands">
        <term><varname>bdr.permit_unsafe_ddl_commands</varname> (<type>boolean</type>)
         <indexterm>
          <primary><varname>bdr.permit_unsafe_ddl_commands</varname> configuration parameter</primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          For <productname>BDR</productname> allow to execute schema
          changes that cannot safely be replicated. This primarily is
          used internally, but can also be used in other cases.  This
          option can be set at any time, but only by superusers.
         </para>
         <warning>
          <para>
           Inconsiderate usage of this option easily allows to break
           replication setups.
          </para>
         </warning>
        </listitem>
       </varlistentry>


       <varlistentry id="guc-bdr-skip-ddl-replication" xreflabel="bdr.skip_ddl_replication">
        <term><varname>bdr.skip_ddl_replication</varname> (<type>boolean</type>)
         <indexterm>
          <primary><varname>bdr.skip_ddl_replication</varname> configuration parameter</primary>
         </indexterm>
        </term>
        <listitem>
         <para>
          For <productname>BDR</productname> don't replicate schema
          changes to other systems. This is primarily useful
          for <productname>BDR</productname> internal use, but also can
          be used for some intentional schema changes like adding a
          index only on some nodes. This option can be set at any time,
          but only by superusers.
         </para>
         <warning>
          <para>
           Inconsiderate usage of this option easily allows to break
           replication setups.
          </para>
         </warning>
        </listitem>
       </varlistentry>

      </variablelist>
     </para>
    </sect2>
   </sect1>
  </chapter>
 </part>

 <![%include-index;[&bookindex;]]>
 <![%include-xslt-index;[<index id="bookindex"></index>]]>
</book>
