<chapter id="functions" xreflabel="SQL functions">
 <title>Functions</title>
 <indexterm>
  <primary>Functions</primary>
 </indexterm>

 <para>
  &bdr; management is primarily accomplished via SQL-callable functions.
  Functions intended for direct use by the end user are documented here.
 </para>

 <para>
  All functions in &bdr; are exposed in the <literal>bdr</literal> schema. Unless you
  put this on your <literal>search_path</literal> you'll need to schema-qualify their
  names.
 </para>

 <warning>
  <para>
   Do <emphasis>not</emphasis> directly call functions with the prefix
   <literal>internal</literal>, they are intended for &bdr;'s internal
   use only and may lack sanity checks present in the public-facing
   functions and <emphasis>could break your replication setup</emphasis>.
   Stick to using the functions documented here, others
   are subject to change without notice.
  </para>
 </warning>

 <sect1 id="functions-node-mgmt" xreflabel="Node management functions">
  <title>Node management functions</title>

  <para>
   &bdr; uses functions to manage the addition and removal
   of nodes and related replication control functions. See
   <xref linkend="node-management"> for more on how to manage &bdr;.
  </para>

  <para>
   The following functions exist to manage nodes:

   <table>
    <title>Node management functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row id="function-bdr-group-create" xreflabel="bdr.bdr_group_create">
       <entry>
        <indexterm>
         <primary>bdr.bdr_group_create</primary>
        </indexterm>
        <literal><function>bdr.bdr_group_create(<replaceable>local_node_name</replaceable>, <replaceable>node_external_dsn</replaceable>, <replaceable>node_local_dsn DEFAULT NULL</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
	Create the first node in a future cluster of bdr nodes. May be run on
	an empty database or one with existing data. An existing database may
	be a previously standalone normal PostgreSQL database or an ex-BDR
	database cleaned with <xref linkend="function-bdr-remove-bdr-from-local-node">.
	The "dsn" (data source name) parameters are <ulink
	url="https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING">libpq
	connection strings</ulink>.
	<replaceable>local_node_name</replaceable> is an arbitrary node name,
	which must be unique across the BDR group.
	<replaceable>node_external_dsn</replaceable> must be a connection
	string other nodes can use to connect to this node. It must embed any
	required passwords unless passwordless authentication is required or a
	suitable <filename>.pgpass</filename> file is created in the postgres
	home directory. If specified, <replaceable>node_local_dsn</replaceable>
	should be a local loopback or unix socket connection string that the
	node can use to connect to its self; this is only used during initial
	setup to make the database restore faster. <replaceable>apply_delay</replaceable>
	allows you to slow down transaction apply, and is mainly for debugging.
	<replaceable>replication_sets</replaceable> is the collection of replication
	sets this node should receive.
	See <xref linkend="node-management-joining"> for details on node
	joining and creation, and <xref linkend="replication-sets"> for more on
	how replication sets work.
       </entry>
      </row>

      <row id="function-bdr-group-join" xreflabel="bdr.bdr_group_join">
       <entry>
        <indexterm>
         <primary>bdr.bdr_group_join</primary>
        </indexterm>
        <literal><function>bdr.bdr_group_join(<replaceable>local_node_name</replaceable>, <replaceable>node_external_dsn</replaceable>, <replaceable>join_using_dsn</replaceable>, <replaceable>node_local_dsn DEFAULT NULL</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
	Join this database to a cluster of existing bdr nodes. This will
	initiate connections to and from all nother nodes. The function returns
	immediately, without waiting for the join process to complete, and only
	starts work when the calling transaction commits.
	<xref linkend="function-bdr-node-join-wait-for-ready"> may be used to
	wait until join completes. If there are problems with the join, check
	the PostgreSQL logs on both systems for more information. The parameters
	are the same as <function>bdr.bdr_group_create()</function> except for
	the additional required parameter <replaceable>join_using_dsn</replaceable>.
	This must be the libpq connection string of the node to initialize from,
	i.e. the other node's <replaceable>node_external_dsn</replaceable>.
	Any node may be chosen as the join target, but if possible a node with
	a fast and reliable network link to the new node should be preferred.
	Note that <function>bdr.bdr_group_join()</function> can <emphasis>not</emphasis>
	"re-join" a node you removed with <function>bdr.bdr_part_by_node_names()</function>.
	See <xref linkend="node-management-joining"> for details on node
	joining and creation, and <xref linkend="replication-sets"> for more on
	how replication sets work.
       </entry>
      </row>

      <row id="function-bdr-part-by-node-names" xreflabel="bdr.bdr_part_by_node_names">
       <entry>
        <indexterm>
         <primary>bdr.bdr_part_by_node_names</primary>
        </indexterm>
        <literal><function>bdr.bdr_part_by_node_names(<replaceable>p_nodes text[]</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Removes all the nodes - identified by the node names in the
        array. All the remaining nodes in the cluster have to be
        reachable for this to succeed. This function must be run
        on a node that is not being removed. There is no way to re-join
        a node once removed; a new node must be created and joined
        to replace the parted one if required.
       </entry>
      </row>

      <row id="function-bdr-remove-bdr-from-local-node" xreflabel="bdr.remove_bdr_from_local_node">
       <entry>
        <indexterm>
         <primary>bdr.remove_bdr_from_local_node</primary>
        </indexterm>
        <literal><function>bdr.remove_bdr_from_local_node(<replaceable>force boolean</replaceable>, <replaceable>convert_global_sequences boolean</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Remove BDR slots, replication identifiers, security labels including
        replication sets, etc from a BDR-enabled database, so the BDR extension
        can be dropped and the database used for normal PostgreSQL. Will refuse to run on a
        node that hasn't already been parted from the cluster unless
        <literal>force</literal> is true. Global sequences are converted into
        local sequences unless <literal>convert_global_sequences</literal> is
        false. See <xref
        linkend="node-management-disabling"> for details, including important
        caveats with conversion of sequences.
       </entry>
      </row>

      <row id="function-bdr-node-join-wait-for-ready" xreflabel="bdr.bdr_node_join_wait_for_ready">
       <entry>
        <indexterm>
         <primary>bdr.bdr_node_join_wait_for_ready</primary>
        </indexterm>
        <literal><function>bdr.bdr_node_join_wait_for_ready()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Wait till all in-progress node joins have completed.
       </entry>
      </row>

      <row id="function-bdr-is-active-in-db" xreflabel="bdr.bdr_is_active_in_db()">
       <entry>
        <indexterm>
         <primary>bdr.bdr_is_active_in_db</primary>
        </indexterm>
        <literal><function>bdr.bdr_is_active_in_db()</function></literal>
       </entry>
       <entry>boolean</entry>
       <entry>
        Report whether the current database has BDR active. Will be true if BDR is
        configured, whether or not there are active connections or any peer nodes
        added yet. Also true on a parted node until/unless
        <xref linkend="function-bdr-remove-bdr-from-local-node"> is called.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_apply_pause</primary>
        </indexterm>
        <literal><function>bdr.bdr_apply_pause()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Temporarily stop applying changes from remote nodes to the local node,
        until resume is requested with
        <function>bdr.bdr_apply_resume()</function>.
        Connections to the remote node(s) are retained but no data is read from
        them. The effects of pausing apply are not persistent, so replay will
        resume if PostgreSQL is restarted or the postmaster does crash recovery
        after a backend crash. Terminating individual backends using
        <function>pg_terminate_backend</function> will not
        cause replay to resume; nor will reloading the postmaster without a full
        restart. There is no option to pause replay from only one peer node.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_apply_resume</primary>
        </indexterm>
        <literal><function>bdr.bdr_apply_resume()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Resume replaying changes from peer nodes after replay has been paused
        by <function>bdr.bdr_apply_pause()</function>.
       </entry>
      </row>

      <row id="function-bdr-apply-is-paused" xreflabel="bdr.bdr_apply_is_paused()">
       <entry>
        <indexterm>
         <primary>bdr.bdr_apply_is_paused</primary>
        </indexterm>
        <literal><function>bdr.bdr_apply_is_paused()</function></literal>
       </entry>
       <entry>boolean</entry>
       <entry>
        Report whether replay is paused (e.g. with
        <function>bdr.bdr_apply_pause()</function>). A false return
        does not mean replay is actually progressing, only that
        it's not intentionally paused.
       </entry>
      </row>

      <row id="function-bdr-replicate-ddl-command" xreflabel="bdr.bdr_replicate_ddl_command">
       <entry>
        <indexterm>
         <primary>bdr.bdr_replicate_ddl_command</primary>
        </indexterm>
        <literal><function>bdr.bdr_replicate_ddl_command(<replaceable>cmd text</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Execute the <acronym>SQL</acronym> (usually <acronym>DDL</acronym>)
        <replaceable>cmd</replaceable> on the local node and queue it for
        extension on all peer nodes. The same limitations apply to this
        function as to DDL run directly
        by the user, except that DDL not normally replicated by &bdr;
        will be replicated if run with this function; see
        <xref linkend="ddl-replication">. References to objects in DDL
        must be fully schema-qualified (e.g. <literal>public.mytable</literal>
        not just <literal>mytable</literal>), otherwise the error <literal>no
        schema has been selected to create in</literal> will be emitted.
        Additionally, this function <emphasis>does not acquire the global
        DDL lock</emphasis> so care must be taken to ensure that concurrent
        DDL is not run on multiple nodes. <emphasis>Do not use this to
        enqueue <literal>ALTER TABLE</literal>, <literal>DROP TABLE</literal>
        etc on a &bdr; system</emphasis> as committed but not yet applied
        changes from other nodes might fail to apply after the change,
        breaking replication.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_xlog_wait_remote_apply</primary>
        </indexterm>
        <literal><function>pg_xlog_wait_remote_apply(<replaceable>lsn pg_lsn</replaceable>, <replaceable>pid integer</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Wait until the replication connection with process id <replaceable>pid</replaceable>
        (or all connections if <replaceable>pid</replaceable> is <literal>0</literal>)
        in <literal>pg_stat_replication</literal> has replayed WAL up to at least
        <replaceable>lsn</replaceable>. Typically used with
        <function>pg_current_xlog_insert_location()</function> as the target LSN.
        Note that currently disconnected peers will <emphasis>not</emphasis> be waited for; this
        function cannot be used to verify that all peers are caught up, only all currently
        connected peers.
        (This function was added to PostgreSQL 9.4 by the BDR patches and is not part
         of the BDR extension as such.)
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_xlog_wait_remote_receive</primary>
        </indexterm>
        <literal><function>pg_xlog_wait_remote_receive(<replaceable>lsn pg_lsn</replaceable>, <replaceable>pid integer</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Same as <function>pg_xlog_wait_remote_apply(...)</function>, but
        returns as soon as the remote confirms it has received the changes, not
        necessarily applied them.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.terminate_apply_workers(text,oid,oid)</primary>
        </indexterm>
        <literal><function>bdr.terminate_apply_workers(<replaceable>sysid text</replaceable>, <replaceable>timeline oid</replaceable>, <replaceable>dboid oid</replaceable>)</function></literal>
       </entry>
       <entry>boolean</entry>
       <entry>
        Terminate any downstream (apply) BDR workers that are connected to
        the upstream peer with the identified
        (<literal>sysid</literal>,<literal>timeline</literal>,<literal>dboid</literal>)
        tuple. Returns true if a terminate signal was successfully sent. The worker may not
        yet have exited; check <literal>pg_stat_activity</literal>.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.terminate_walsender_workers(text,oid,oid)</primary>
        </indexterm>
        <literal><function>bdr.terminate_walsender_workers(<replaceable>sysid text</replaceable>, <replaceable>timeline oid</replaceable>, <replaceable>dboid oid</replaceable>)</function></literal>
       </entry>
       <entry>boolean</entry>
       <entry>
        Terminate any upstream (walsender) BDR workers that are connected to
        the downstream peer with the identified
        (<literal>sysid</literal>,<literal>timeline</literal>,<literal>dboid</literal>)
        tuple. Returns true if a terminate signal was successfully sent. The worker may not
        yet have exited; check <literal>pg_stat_activity</literal>.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.terminate_apply_workers(text)</primary>
        </indexterm>
        <literal><function>bdr.terminate_apply_workers(<replaceable>node_name text</replaceable>)</function></literal>
       </entry>
       <entry>boolean</entry>
       <entry>
        Same as <literal>bdr.terminate_apply_workers(text,oid,oid)</literal> but instead of a node
        identity tuple this function looks up the node in <literal>bdr.bdr_nodes</literal> by node
        name.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.terminate_walsender_workers(text)</primary>
        </indexterm>
        <literal><function>bdr.terminate_walsender_workers(<replaceable>node_name text</replaceable>)</function></literal>
       </entry>
       <entry>boolean</entry>
       <entry>
        Same as <literal>bdr.terminate_walsender_workers(text,oid,oid)</literal> but instead of a node
        identity tuple this function looks up the node in <literal>bdr.bdr_nodes</literal> by node
        name.
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.skip_changes_upto</primary>
        </indexterm>
        <literal><function>bdr.skip_changes_upto(<replaceable>sysid text</replaceable>, <replaceable>timeline oid</replaceable>, <replaceable>dboid oid</replaceable>, <replaceable>skip_to_lsn pg_lsn</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        <para>
         Discard (skip over) changes not yet replayed from the peer with identity
         (<replaceable>sysid</replaceable>,<replaceable>timeline</replaceable>,<replaceable>dboid</replaceable>),
         resuming replay at the first commit after <replaceable>skip_to_lsn</replaceable>. A commit exactly at
         the specified LSN is skipped, not replayed.
        </para>
        <warning>
         <para>
          This function is <emphasis>very dangerous</emphasis>. Improper use can completely break your
          replication setup, and almost any use will cause your cluster nodes to become inconsistent
          with each other. It is intended only for recovery from situations where replication is broken
          by un-replayable DDL or similar.
         </para>
        </warning>
        <para>
         Use the <link
         linkend="guc-bdr-trace-replay"><literal>bdr.trace_replay</literal></link>
         setting to enable replay tracing and find the problem change to skip,
         or look at the error context emitted in log messages if there's an
         error. You may need to set <literal>log_error_verbosity =
         verbose</literal> in <filename>postgresql.conf</filename> to see the
         full error context. Skip to the commit LSN reported in the error, like
         <literal>"in commit 0123/ABCD0123"</literal>.
        </para>
        <para>
         Because the change is still committed on the node it originated from
         and possibly on other nodes, to restore consistency you'll have to
         perform some transactions manually with <link
         linkend="guc-bdr-do-not-replicate"><literal>bdr.do_not_replicate</literal></link>,
         <link
         linkend="guc-bdr-permit-unsafe-ddl-commands"><literal>bdr.permit_unsafe_ddl_commands</literal></link>
         and/or <link
         linkend="guc-bdr-skip-ddl-replication"><literal>bdr.skip_ddl_replication</literal></link>
         options set to restore consistency by manually undoing the operations
         on some nodes or manually applying them on the other nodes.
        </para>
        <note>
         <para>
         BDR still cares about dropped columns in tables, so if you dropped a
         column in one node then skipped the drop in another, you
         <emphasis>must</emphasis> manually drop the column in the one you
         skipped it in; adding the column back on the other side does
         <emphasis>not</emphasis> have the same effect because BDR uses the
         underlying column attribute numbers from
         <literal>pg_catalog.pg_attribute</literal>, not column names, to
         replicate... and those numbers change when you drop and re-create a
         column.
        </para>
       </note>
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

  <sect2 id="functions-node-mgmt-subscribe" xreflabel="bdr.bdr_subscribe">
   <title><function>bdr.bdr_subscribe</function></title>

   <indexterm>
    <primary>subscribe</primary>
   </indexterm>

   <para>
    The function <function>bdr.bdr_subscribe</> has been removed from BDR. For
    uni-directional replication, look at the
    <ulink url="http://2ndquadrant.com/pglogical">pglogical project</ulink>
    project or tools like Londiste.
   </para>

  </sect2>

  <sect2 id="functions-node-mgmt-examples" xreflabel="Node management function examples">
   <title>Node management function examples</title>
   <para>
   These examples show libpq connection strings without a host or hostadd.
   </para>
   <para>
   To create a &bdr group on 'node1':
   </para>
   <programlisting>
    SELECT bdr.bdr_group_create(
       local_node_name := 'node1',
       node_external_dsn := 'port=5598 dbname=bdrdemo');
   </programlisting>
   <para>
   To join 'node2' to &bdr group created above:
   </para>
   <programlisting>
    SELECT bdr.bdr_group_join(
       local_node_name := 'node2',
       node_external_dsn := 'port=5559 dbname=bdrdemo',
       join_using_dsn := 'port=5558 dbname=bdrdemo');
   </programlisting>
   <para>

   To remove 'node2' from the &bdr group created above:
   </para>
   <programlisting>
   SELECT bdr.bdr_part_by_node_names('{node2}');
   </programlisting>
   <para>
   To see if your node is ready for replication (if you see a NULL result set, your node is ready):
   </para>
   <programlisting>
   SELECT bdr.bdr_node_join_wait_for_ready();
   </programlisting>
 </sect2>

 </sect1>

 <sect1 id="functions-replication-sets" xreflabel="Replication Set functions">
  <title>Replication Set functions</title>
  <para>
   The following functions exist to manage <xref linkend="replication-sets">.

   <table>
    <title>Replication Set functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row id="function-bdr-table-set-replication-sets" xreflabel="bdr.table_set_replication_sets">
       <entry>
        <indexterm>
         <primary>bdr.table_set_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.table_set_replication_sets(<replaceable>p_relation regclass</replaceable>, <replaceable>p_sets text[]</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Sets the replication sets of a table. The previous assignment will be
        overwritten (not merged or added to). Setting a table's replication
        sets does <emphasis>not</emphasis> cause the table to be synchronized
        to nodes that will newly start receiving changes to the table, nor
        does it cause it to be emptied on nodes that will newly stop receiving
        changes. See <xref linkend="replication-sets-concepts">.
       </entry>
      </row>

      <row id="function-bdr-table-get-replication-sets" xreflabel="bdr.table_get_replication_sets">
       <entry>
        <indexterm>
         <primary>bdr.table_get_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.table_get_replication_sets(<replaceable>relation regclass</replaceable>)</function></literal>
       </entry>
       <entry>text[]</entry>
       <entry>
        Returns the replication sets the specified table is part of.
       </entry>
      </row>

      <row id="function-bdr-connection-set-replication-sets-byname" xreflabel="bdr.connection_set_replication_sets">
       <entry>
        <indexterm>
         <primary>bdr.connection_set_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.connection_set_replication_sets(<replaceable>replication_sets text[]</replaceable>, <replaceable>node_name text</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Sets the replication sets of the default connection for the named
        node. The previous assignment will be overwritten. Any override
        connections for individual nodes (where the
        <literal>origin_sysid</literal> etc in
        <literal>bdr.bdr_connections</literal> are nonzero) are left unchanged;
        a warning will be emitted if any are present.
       </entry>
      </row>

      <row id="function-bdr-connection-get-replication-sets-byname" xreflabel="bdr.connection_get_replication_sets">
       <entry>
        <indexterm>
         <primary>bdr.connection_get_replication_sets(text)</primary>
        </indexterm>
        <literal><function>bdr.connection_get_replication_sets(<replaceable>node_name text</replaceable>)</function></literal>
       </entry>
       <entry>text[]</entry>
       <entry>
        Returns the replication sets configured for the the default connection
        to the named node.  Any override connections for individual nodes
        (where the <literal>origin_sysid</literal> etc in
        <literal>bdr.bdr_connections</literal> are nonzero) are ignored and
        a warning is issued if any are present.
       </entry>
      </row>

      <row id="function-bdr-connection-set-replication-sets-byid" xreflabel="bdr.connection_set_replication_sets">
       <entry>
        <indexterm>
         <primary>bdr.connection_set_replication_sets(text[],text)</primary>
        </indexterm>
        <literal><function>bdr.connection_set_replication_sets(<replaceable>replication_sets text[]</replaceable>, <replaceable>sysid text</replaceable>, <replaceable>timeline oid</replaceable>, <replaceable>dboid oid</replaceable>, <replaceable>origin_sysid text default '0'</replaceable>, <replaceable>origin_timeline oid default 0</replaceable>, <replaceable>origin_dboid oid default 0</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
         Sets the replication sets of the connection with the given (sysid,
         timeline, dboid) identity tuple. If no (origin_sysid, origin_timeline,
         origin_dboid) are specified, the default connection for the node is
         modified. Otherwise the override connection for the given node is
         updated instead. In almost all cases it's simpler to just use the
         node-name variant; this is for advanced uses.
       </entry>
      </row>

      <row id="function-bdr-connection-get-replication-sets-byid" xreflabel="bdr.connection_get_replication_sets">
       <entry>
        <indexterm>
         <primary>bdr.connection_get_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.connection_get_replication_sets(<replaceable>sysid text</replaceable>, <replaceable>timeline oid</replaceable>, <replaceable>dboid oid</replaceable>, <replaceable>origin_sysid text default '0'</replaceable>, <replaceable>origin_timeline oid default 0</replaceable>, <replaceable>origin_dboid oid default 0</replaceable>)</function></literal>
       </entry>
       <entry>text[]</entry>
       <entry>
         Returns the replication sets of the connection with the given (sysid,
         timeline, dboid) identity tuple. If no (origin_sysid, origin_timeline,
         origin_dboid) are specified, the default connection for the node is
         returned. Otherwise the override connection for the given node is
         returned instead. In almost all cases it's simpler to just use the
         node-name variant; this is for advanced uses.
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>

 <sect1 id="functions-conflict-handlers" xreflabel="Conflict handler management functions">
  <title>Conflict handler management functions</title>

  <para>
   The following functions manage conflict handlers ("conflict triggers"):

   <table>
    <title>Conflict handler management functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_create_conflict_handler</primary>
        </indexterm>
        <literal><function>bdr.bdr_create_conflict_handler(<replaceable>ch_rel</replaceable>, <replaceable>ch_name</replaceable>, <replaceable>ch_proc</replaceable>, <replaceable>ch_type</replaceable>, <replaceable>ch_timeframe</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Registers a conflict handler procedure named <replaceable>ch_name</replaceable> on table <replaceable>ch_rel</replaceable> to invoke the conflict handler procedure <replaceable>ch_proc</replaceable> when a conflict occurs within the interval <replaceable>ch_timeframe</replaceable>. See <xref linkend="conflicts"> for details.</entry>
      </row>

      <row>
       <entry>
        <literal><function>bdr.bdr_create_conflict_handler(<replaceable>ch_rel</replaceable>, <replaceable>ch_name</replaceable>, <replaceable>ch_proc</replaceable>, <replaceable>ch_type</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>The same as above, but always invoked irrespective of how different the two conflicting rows are in age, so takes no <replaceable>timeframe</replaceable> argument.</entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_drop_conflict_handler</primary>
        </indexterm>
        <literal><function>bdr.bdr_drop_conflict_handler(<replaceable>ch_rel</replaceable>, <replaceable>ch_name</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Unregisters the conflict handler procedure named <replaceable>ch_name</replaceable> on table <replaceable>ch_rel</replaceable>. See <xref linkend="conflicts">.</entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

 </sect1>

 <sect1 id="functions-information" xreflabel="Information functions">
  <title>Information functions</title>

  <para>
   The following functions provide information about a BDR node:

   <table>
    <title>Node information functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_version</primary>
        </indexterm>
        <literal><function>bdr.bdr_version()</function></literal>
       </entry>
       <entry>text</entry>
       <entry>Report the &bdr; version in human-readable <replaceable>major.minor.rev-yyyy-mm-dd-gitrev</replaceable> text form, with build date and git revision, e.g. <literal>0.9.0-2015-02-08-3f3fb7c</literal>.</entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_version_num</primary>
        </indexterm>
        <literal><function>bdr.bdr_version_num()</function></literal>
       </entry>
       <entry>integer</entry>
       <entry>Report just the &bdr; version number in numeric AAAABBCC form, (A: major, B: minor, C: rev) e.g. <literal>0.9.0</literal> is <literal>900</literal> (00000900).</entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_min_remote_version_num</primary>
        </indexterm>
        <literal><function>bdr.bdr_min_remote_version_num()</function></literal>
       </entry>
       <entry>integer</entry>
       <entry>Return the oldest version of the &bdr; extension that this node can compatibly receive streamed changes from.</entry>
      </row>

      <row id="functions-bdr-get-local-node-name" xreflabel="bdr.bdr_get_local_node_name()">
       <entry>
        <indexterm>
         <primary>bdr.bdr_get_local_node_name</primary>
        </indexterm>
        <literal><function>bdr.bdr_get_local_node_name()</function></literal>
       </entry>
       <entry>text</entry>
       <entry>Look up the local node in <literal>bdr.bdr_nodes</literal> and return the node name - or null if the node is not a &bdr; peer</entry>
      </row>

      <row id="functions-bdr-get-local-node-id" xreflabel="bdr.bdr_get_local_nodeid()">
       <entry>
        <indexterm>
         <primary>bdr.bdr_get_local_nodeid</primary>
        </indexterm>
        <literal><function>bdr.bdr_get_local_nodeid()</function></literal>
       </entry>
       <entry>record</entry>
       <entry>Returns a tuple containing the local node's <literal>sysid</literal>, <literal>timeline</literal>, and <literal>dboid</literal>.</entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_get_remote_nodeinfo</primary>
        </indexterm>
        <literal><function>bdr.bdr_get_remote_nodeinfo(<replaceable>peer_dsn</replaceable>)</function></literal>
       </entry>
       <entry>record</entry>
       <entry>Connect to a remote node and interrogate it for &bdr; information. This function is primarily for &bdr; internal use during setup and connection establishment.</entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_test_remote_connectback</primary>
        </indexterm>
        <literal><function>bdr.bdr_test_remote_connectback(<replaceable>peer_dsn</replaceable>, <replaceable>local_dsn</replaceable>)</function></literal>
       </entry>
       <entry>record</entry>
       <entry>Ask a remote node to connect back to this node. This function is primarily for &bdr; internal use during setup and connection establishment.</entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

 </sect1>

 <sect1 id="functions-upgrade" xreflabel="Upgrade functions">
  <title>Upgrade functions</title>

  <para>
   The following function(s) are used when upgrading &bdr; to a new version:

   <table>
    <title>Upgrade functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>
        <indexterm>
         <primary>bdr.bdr_upgrade_to_090</primary>
        </indexterm>
        <literal><function>bdr.bdr_upgrade_to_090(<replaceable>my_conninfo cstring</replaceable>, <replaceable>local_conninfo cstring</replaceable>, <replaceable>remote_conninfo cstring</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Used during upgrade from 0.7.x or 0.8.x to &bdr; version 0.9.x. See <xref linkend="upgrade">.</entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

 </sect1>

</chapter>
