<chapter id="functions" xreflabel="SQL functions">
 <title>Functions</title>
 <indexterm>
  <primary>Functions</primary>
 </indexterm>

 <sect1 id="functions-node-mgmt">
  <title>Node management functions</title>
  <para>
   The following functions exist to manage nodes:

   <table>
    <title>Node management functions</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&udr;/&bdr;</entry>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_subscribe</primary>
        </indexterm>
        <literal><function>bdr.bdr_subscribe(<replaceable>local_node_name</replaceable>, <replaceable>subscribe_to_dsn</replaceable>, <replaceable>node_local_dsn</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>), <replaceable>synchronize bdr_sync_type DEFAULT 'full'</replaceable></function></literal>
       </entry>
       <entry>void</entry>
       <entry>Subscribes to changes made on another node. See <xref linkend="functions-node-mgmt-subscribe">.</entry>
      </row>

      <row id="function-bdr-group-create" xreflabel="bdr.bdr_group_create">
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_group_create</primary>
        </indexterm>
        <literal><function>bdr.bdr_group_create(<replaceable>local_node_name</replaceable>, <replaceable>node_external_dsn</replaceable>, <replaceable>node_local_dsn DEFAULT NULL</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Create the first node in a future cluster of bdr nodes.
       </entry>
      </row>

      <row id="function-bdr-group-join" xreflabel="bdr.bdr_group_join">
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_group_join</primary>
        </indexterm>
        <literal><function>bdr.bdr_group_join(<replaceable>local_node_name</replaceable>, <replaceable>node_external_dsn</replaceable>, <replaceable>join_using_dsn</replaceable>, <replaceable>node_local_dsn DEFAULT NULL</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Join this database to a cluster of existing bdr nodes. This
        will initiate connections to and from all nother nodes.
       </entry>
      </row>

      <row id="function-bdr-part-by-node-names" xreflabel="bdr.bdr_part_by_node_names">
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_part_by_node_names</primary>
        </indexterm>
        <literal><function>bdr.bdr_part_by_node_names(<replaceable>p_nodes text[]</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Removes all the nodes - identified by the node names in the
        array. All the remaining nodes in the cluster have to be
        reachable for this to succeed.
       </entry>
      </row>

      <row id="function-bdr-node-join-wait-for-ready" xreflabel="bdr.bdr_node_join_wait_for_ready">
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_node_join_wait_for_ready</primary>
        </indexterm>
        <literal><function>bdr.bdr_node_join_wait_for_ready()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Wait till all in-progress node joins have completed.
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

  <sect2 id="functions-node-mgmt-subscribe" xreflabel="bdr.bdr_subscribe">
   <title><function>bdr.bdr_subscribe</function></title>

   <indexterm>
    <primary>subscribe</primary>
   </indexterm>

   <para>
    The function <function>bdr.bdr_subscribe</> will create unidirectional
    connection between the local node and <parameter>subscribe_to_dsn</> node.
   </para>

   <para>
    The parameters are:
    <variablelist>
     <varlistentry>
      <term><replaceable>local_node_name</replaceable></term>
      <listitem>
       <para>
        A string specifying the name of the new node (for identification
        purposes).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>subscribe_to_dsn</replaceable></term>
      <listitem>
       <para>
        Connection string of the remote node from which replication should be
        started.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>node_local_dsn</replaceable></term>
      <listitem>
       <para>
        <emphasis>Public</> connection string to the new local node. It is
        used during initialization.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>apply_delay</replaceable> (optional)</term>
      <listitem>
       <para>
        Time (in milliseconds), the node will wait before applying changes
        incoming from from the remote node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>replication_sets</replaceable> (optional)</term>
      <listitem>
       <para>
        Text array of replication sets which should be replicated to the local
        node. Note that you need to assign individual tables to the
        replication sets on the <emphasis>remote</> node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>synchronize</replaceable> (optional)</term>
      <listitem>
       <para>
        What to synchronize (copy) during the node initialization. Currently
        supported values are <literal>full</> (the default) which means do
        full schema and data copy and <literal>none</> which means don't copy
        anything. Note that this can cause apply failures if the schemas of
        nodes differ.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

 </sect1>

 <sect1 id="functions-replication-sets">
  <title>Replication Set functions</title>
  <para>
   The following functions exist to manage <xref linkend="replication-sets">.
   They are used in both &bdr; and &udr; context.

   <table>
    <title>Replication Set functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row id="function-bdr-table-set-replication-sets">
       <entry>
        <indexterm>
         <primary>bdr.table_set_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.table_set_replication_sets(<replaceable>p_relation regclass</replaceable>, <replaceable>p_sets text[]</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
         Sets the replication sets of a table. The previous assignment will
         be overwritten.
       </entry>
      </row>

      <row id="function-bdr-table-get-replication-sets">
       <entry>
        <indexterm>
         <primary>bdr.table_get_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.table_get_replication_sets(<replaceable>relation regclass</replaceable>)</function></literal>
       </entry>
       <entry>text[]</entry>
       <entry>
        Returns the replication sets the specified table is part of.
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>
</chapter>
