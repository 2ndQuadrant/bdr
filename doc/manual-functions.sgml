<chapter id="functions" xreflabel="SQL functions">
 <title>Functions</title>
 <indexterm>
  <primary>Functions</primary>
 </indexterm>

 <para>
  &bdr; management is primarily accomplished via SQL-callable functions.
  Functions intended for direct use by the end user are documented here.
 </para>

 <para>
  All functions in &bdr; are exposed in the <literal>bdr</literal> schema. Unless you
  put this on your <literal>search_path</literal> you'll need to schema-qualify their
  names.
 </para>

 <warning>
  <para>
   Do <emphasis>not</emphasis> directly call functions with the prefix
   <literal>internal</literal>, they are intended for &bdr;'s internal
   use only and may lack sanity checks present in the public-facing
   functions and <emphasis>could break your replication setup</emphasis>.
   Stick to using the functions documented here, others
   are subject to change without notice.
  </para>
 </warning>

 <sect1 id="functions-node-mgmt" xreflabel="Node management functions">
  <title>Node management functions</title>

  <para>
   &bdr; and &udr; use functions to manage the addition and removal
   of nodes and related replication control functions. See
   <xref linkend="node-management"> for more on how to manage &bdr;.
  </para>

  <para>
   The following functions exist to manage nodes:

   <table>
    <title>Node management functions</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&udr;/&bdr;</entry>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_subscribe</primary>
        </indexterm>
        <literal><function>bdr.bdr_subscribe(<replaceable>local_node_name</replaceable>, <replaceable>subscribe_to_dsn</replaceable>, <replaceable>node_local_dsn</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>, <replaceable>synchronize bdr_sync_type DEFAULT 'full'</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Subscribes to changes made on another node. See <xref linkend="functions-node-mgmt-subscribe">.</entry>
      </row>

      <row>
       <entry>&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_unsubscribe</primary>
        </indexterm>
        <literal><function>bdr.bdr_unsubscribe(<replaceable>local_node_name</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Removes a previously created &udr; subscription.</entry>
      </row>

      <row id="function-bdr-group-create" xreflabel="bdr.bdr_group_create">
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_group_create</primary>
        </indexterm>
        <literal><function>bdr.bdr_group_create(<replaceable>local_node_name</replaceable>, <replaceable>node_external_dsn</replaceable>, <replaceable>node_local_dsn DEFAULT NULL</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Create the first node in a future cluster of bdr nodes.
       </entry>
      </row>

      <row id="function-bdr-group-join" xreflabel="bdr.bdr_group_join">
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_group_join</primary>
        </indexterm>
        <literal><function>bdr.bdr_group_join(<replaceable>local_node_name</replaceable>, <replaceable>node_external_dsn</replaceable>, <replaceable>join_using_dsn</replaceable>, <replaceable>node_local_dsn DEFAULT NULL</replaceable>, <replaceable>apply_delay integer DEFAULT NULL</replaceable>, <replaceable>replication_sets text[] DEFAULT ARRAY['default']</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Join this database to a cluster of existing bdr nodes. This
        will initiate connections to and from all nother nodes.
       </entry>
      </row>

      <row id="function-bdr-part-by-node-names" xreflabel="bdr.bdr_part_by_node_names">
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_part_by_node_names</primary>
        </indexterm>
        <literal><function>bdr.bdr_part_by_node_names(<replaceable>p_nodes text[]</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Removes all the nodes - identified by the node names in the
        array. All the remaining nodes in the cluster have to be
        reachable for this to succeed.
       </entry>
      </row>

      <row id="function-bdr-node-join-wait-for-ready" xreflabel="bdr.bdr_node_join_wait_for_ready">
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_node_join_wait_for_ready</primary>
        </indexterm>
        <literal><function>bdr.bdr_node_join_wait_for_ready()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Wait till all in-progress node joins have completed.
       </entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_apply_pause</primary>
        </indexterm>
        <literal><function>bdr.bdr_apply_pause()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Temporarily stop applying changes from remote nodes to the local node,
        until resume is requested with
        <function>bdr.bdr_apply_resume()</function>.
        Connections to the remote node(s) are retained but no data is read from
        them. The effects of pausing apply are not persistent, so replay will
        resume if PostgreSQL is restarted or the postmaster does crash recovery
        after a backend crash. Terminating individual backends using
        <function>pg_terminate_backend</function> will not
        cause replay to resume; nor will reloading the postmaster without a full
        restart. There is no option to pause replay from only one peer node.
       </entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_apply_resume</primary>
        </indexterm>
        <literal><function>bdr.bdr_apply_resume()</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Resume replaying changes from peer nodes after replay has been paused
        by <function>bdr.bdr_apply_pause()</function>.
       </entry>
      </row>

      <row>
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_replicate_ddl_command</primary>
        </indexterm>
        <literal><function>bdr.bdr_replicate_ddl_command(<replaceable>cmd text</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
        Execute the <acronym>SQL</acronym> (usually <acronym>DDL</acronym>)
        <replaceable>cmd</replaceable> on the local node and queue it for
        extension on all peer nodes. <emphasis>This function is mainly for &bdr; internal
        use and bypasses some safety checks, use with caution.</emphasis>
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

  <sect2 id="functions-node-mgmt-subscribe" xreflabel="Node management function examples">
   <title><function>bdr.bdr_subscribe</function></title>

   <indexterm>
    <primary>subscribe</primary>
   </indexterm>

   <para>
    The function <function>bdr.bdr_subscribe</> will create unidirectional
    connection between the local node and <parameter>subscribe_to_dsn</> node.
   </para>

   <para>
    Since: version 0.9.0.
   </para>

   <para>
    The parameters are:
    <variablelist>
     <varlistentry>
      <term><replaceable>local_node_name</replaceable></term>
      <listitem>
       <para>
        A string specifying the name of the new node (for identification
        purposes).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>subscribe_to_dsn</replaceable></term>
      <listitem>
       <para>
        Connection string of the remote node from which replication should be
        started.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>node_local_dsn</replaceable></term>
      <listitem>
       <para>
        <emphasis>Public</> connection string to the new local node. It is
        used during initialization.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>apply_delay</replaceable> (optional)</term>
      <listitem>
       <para>
        Time (in milliseconds), the node will wait before applying changes
        incoming from from the remote node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>replication_sets</replaceable> (optional)</term>
      <listitem>
       <para>
        Text array of replication sets which should be replicated to the local
        node. Note that you need to assign individual tables to the
        replication sets on the <emphasis>remote</> node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>synchronize</replaceable> (optional)</term>
      <listitem>
       <para>
        What to synchronize (copy) during the node initialization. Currently
        supported values are <literal>full</> (the default) which means do
        full schema and data copy and <literal>none</> which means don't copy
        anything. Note that this can cause apply failures if the schemas of
        nodes differ.
       </para>
       <para>
        If objects (tables, functions, types, views, etc) already exist on the
        local node, i.e. the node calling this function, and have the same names
        as objects on the upstream node being subscribed to, the subscribe may
        fail. This failure will be visible in the logs but will not result
        in any error being sent to the client that invoked the subscribe
        function. Use <function>bdr.bdr_unsubscribe</function> to remove a
        failed subscription.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

  <sect2 id="functions-node-mgmt-examples" xreflabel="node_">
   <title>Node management function examples</title>
   <para>
   These examples show libpq connection strings without a host or hostadd.
   </para>
   <para>
   To subscribe to a UDR group:
   </para>
   <programlisting>
    SELECT bdr_bdr_subscribe(
       local_node_name := 'udrnode',
       subscribe_to_dsn := 'port=6000 dbname=udrdemo',
       node_local_dsn := 'port=6001 dbname=udrdemo');
   </programlisting>
   <para>
   To create a &bdr group on 'node1':
   </para>
   <programlisting>
    SELECT bdr_bdr_group_create(
       local_node_name := 'node1',
       node_external_dsn := 'port=5598 dbname=bdrdemo');
   </programlisting>
   <para>
   To join 'node2' to &bdr group created above:
   </para>
   <programlisting>
    SELECT bdr.bdr_group_join(
       local_node_name := 'node2',
       node_external_dsn := 'port=5559 dbname=bdrdemo',
       join_using_dsn := 'port=5558 dbname=bdrdemo');
   </programlisting>
   <para>

   To remove 'node2' from the &bdr group created above:
   </para>
   <programlisting>
   SELECT bdr.bdr_part_by_node_names('{node2}');
   </programlisting>
   <para>
   To see if your node is ready for replication (if you see a NULL result set, your node is ready):
   </para>
   <programlisting>
   SELECT bdr.bdr_node_join_wait_for_ready();
   </programlisting>
 </sect2>

 </sect1>

 <sect1 id="functions-replication-sets" xreflabel="Replication Set functions">
  <title>Replication Set functions</title>
  <para>
   The following functions exist to manage <xref linkend="replication-sets">.
   They are used in both &bdr; and &udr; context.

   <table>
    <title>Replication Set functions</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row id="function-bdr-table-set-replication-sets">
       <entry>
        <indexterm>
         <primary>bdr.table_set_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.table_set_replication_sets(<replaceable>p_relation regclass</replaceable>, <replaceable>p_sets text[]</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>
         Sets the replication sets of a table. The previous assignment will
         be overwritten.
       </entry>
      </row>

      <row id="function-bdr-table-get-replication-sets">
       <entry>
        <indexterm>
         <primary>bdr.table_get_replication_sets</primary>
        </indexterm>
        <literal><function>bdr.table_get_replication_sets(<replaceable>relation regclass</replaceable>)</function></literal>
       </entry>
       <entry>text[]</entry>
       <entry>
        Returns the replication sets the specified table is part of.
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>

 <sect1 id="functions-conflict-handlers" xreflabel="Conflict handler management functions">
  <title>Conflict handler management functions</title>

  <para>
   The following functions manage conflict handlers ("conflict triggers"):

   <table>
    <title>Conflict handler management functions</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&udr;/&bdr;</entry>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_create_conflict_handler</primary>
        </indexterm>
        <literal><function>bdr.bdr_create_conflict_handler(<replaceable>ch_rel</replaceable>, <replaceable>ch_name</replaceable>, <replaceable>ch_proc</replaceable>, <replaceable>ch_type</replaceable>, <replaceable>ch_timeframe</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Registers a conflict handler procedure named <replaceable>ch_name</replaceable> on table <replaceable>ch_rel</replaceable> to invoke the conflict handler procedure <replaceable>ch_proc</replaceable> when a conflict occurs within the interval <replaceable>ch_timeframe</replaceable>. See <xref linkend="conflicts"> for details.</entry>
      </row>

      <row>
       <entry>&bdr;</entry>
       <entry>
        <literal><function>bdr.bdr_create_conflict_handler(<replaceable>ch_rel</replaceable>, <replaceable>ch_name</replaceable>, <replaceable>ch_proc</replaceable>, <replaceable>ch_type</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>The same as above, but always invoked irrespective of how different the two conflicting rows are in age, so takes no <replaceable>timeframe</replaceable> argument.</entry>
      </row>

      <row>
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_drop_conflict_handler</primary>
        </indexterm>
        <literal><function>bdr.bdr_drop_conflict_handler(<replaceable>ch_rel</replaceable>, <replaceable>ch_name</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Unregisters the conflict handler procedure named <replaceable>ch_name</replaceable> on table <replaceable>ch_rel</replaceable>. See <xref linkend="conflicts">.</entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

 </sect1>

 <sect1 id="functions-information" xreflabel="Information functions">
  <title>Information functions</title>

  <para>
   The following functions provide information about a BDR node:

   <table>
    <title>Node information functions</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&udr;/&bdr;</entry>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_variant</primary>
        </indexterm>
        <literal><function>bdr.bdr_variant()</function></literal>
       </entry>
       <entry>text</entry>
       <entry>Returns the text <literal>BDR</literal> if run on a node with the full &bdr; extension installed, or <literal>UDR</literal> if the node has only &udr; capabilities.</entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_version</primary>
        </indexterm>
        <literal><function>bdr.bdr_version()</function></literal>
       </entry>
       <entry>text</entry>
       <entry>Report the &bdr;/&udr; version in human-readable <replaceable>major.minor.rev-yyyy-mm-dd-gitrev</replaceable> text form, with build date and git revision, e.g. <literal>0.9.0-2015-02-08-3f3fb7c</literal>.</entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_version_num</primary>
        </indexterm>
        <literal><function>bdr.bdr_version_num()</function></literal>
       </entry>
       <entry>integer</entry>
       <entry>Report just the &bdr;/&udr; version number in numeric AAAABBCC form, (A: major, B: minor, C: rev) e.g. <literal>0.9.0</literal> is <literal>900</literal> (00000900).</entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_min_remote_version_num</primary>
        </indexterm>
        <literal><function>bdr.min_remote_version_num()</function></literal>
       </entry>
       <entry>integer</entry>
       <entry>Return the oldest version of the &bdr;/&udr; extension that this node can compatibly receive streamed changes from.</entry>
      </row>

      <row id="functions-bdr-get-node-name" xreflabel="bdr.bdr_get_node_name()">
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_get_local_node_name</primary>
        </indexterm>
        <literal><function>bdr.bdr_get_local_node_name()</function></literal>
       </entry>
       <entry>text</entry>
       <entry>Look up the local node in <literal>bdr.bdr_nodes</literal> and return the node name - or null if the node is not a &bdr;/&udr; peer</entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_get_remote_nodeinfo</primary>
        </indexterm>
        <literal><function>bdr.bdr_get_remote_nodeinfo(<replaceable>peer_dsn</replaceable>)</function></literal>
       </entry>
       <entry>record</entry>
       <entry>Connect to a remote node and interrogate it for &bdr; information. This function is primarily for &bdr; internal use during setup and connection establishment.</entry>
      </row>

      <row>
       <entry>&bdr;/&udr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_test_remote_connectback</primary>
        </indexterm>
        <literal><function>bdr.bdr_test_remote_connectback(<replaceable>peer_dsn</replaceable>, <replaceable>local_dsn</replaceable>)</function></literal>
       </entry>
       <entry>record</entry>
       <entry>Ask a remote node to connect back to this node. This function is primarily for &bdr; internal use during setup and connection establishment.</entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

 </sect1>

 <sect1 id="functions-upgrade" xreflabel="Upgrade functions">
  <title>Upgrade functions</title>

  <para>
   The following function(s) are used when upgrading &bdr; to a new version:

   <table>
    <title>Upgrade functions</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&udr;/&bdr;</entry>
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>

      <row>
       <entry>&bdr;</entry>
       <entry>
        <indexterm>
         <primary>bdr.bdr_upgrade_to_090</primary>
        </indexterm>
        <literal><function>bdr.bdr_upgrade_to_090(<replaceable>my_conninfo cstring</replaceable>, <replaceable>local_conninfo cstring</replaceable>, <replaceable>remote_conninfo cstring</replaceable>)</function></literal>
       </entry>
       <entry>void</entry>
       <entry>Used during upgrade from 0.7.x or 0.8.x to &bdr; version 0.9.x. See <xref linkend="upgrade">.</entry>
      </row>

     </tbody>
    </tgroup>
   </table>
  </para>

 </sect1>

</chapter>
