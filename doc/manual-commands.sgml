<chapter id="commands" xreflabel="Command-line Utilities">
 <title>Command-line Utilities</title>
 <indexterm>
  <primary>Command-line Utilities</primary>
 </indexterm>

 <para>
  &bdr; provides a number of command-line utilities, which are installed
  to the PostgreSQL <filename>bin</filename> directory when the &bdr; extension
  is installed. The most important is <xref linkend="command-bdr-init-copy">,
  which is used when creating a new node.
 </para>

 <para>
  Some of the commands installed are only intended for &bdr;'s internal use and
  are not documented here.
 </para>

 <sect1 id="command-bdr-init-copy" xreflabel="bdr_init_copy">
  <title>bdr_init_copy</title>

  <para>
   The <application>bdr_init_copy</> command is used to initialize a new
   &bdr; node by making physical copy of an existing node and
   establishing a connection to the node that the clone was made from.
  </para>

  <para>
   Using <application>bdr_init_copy</application> will clone all databases
   from the origin server. All BDR-enabled databases on the cloned peer will
   be bought up for BDR on the downstream.
  </para>

  <para>
   See <xref linkend="node-management"> for more information about node
   creation.
  </para>

  <para>
   By default <application>bdr_init_copy</application> clones the source BDR
   node using <application>pg_basebackup</application>. However, if the data
   directory already contains a physical backup (clone) of the source database
   it will be converted into a BDR node instead. The backup must be taken by
   <application>pg_basebackup</application> or some other safe cloning method
   like <literal>pg_start_backup()</literal> + <application>rsync</application>
   + <literal>pg_stop_backup()</literal> + WAL archive replay or streaming. It
   backup must have a <filename>recovery.conf</filename> that causes it to
   stream changes from the upstream server's WAL archive via
   <literal>restore_command</literal> or <literal>primary_conninfo</literal> so
   it can continue to replay from the source node as a streaming replica when
   it is started up. The backup must not already be running.
   <application>bdr_init_copy</application> will override any existing recovery
   target set in <filename>recovery.conf</filename>. See <ulink
   url="https://www.postgresql.org/docs/current/static/continuous-archiving.html#BACKUP-LOWLEVEL-BASE-BACKUP">
   the PostgreSQL manual</ulink> for information on creating base backups.
  </para>

  <cmdsynopsis>
   <command>bdr_init_copy</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
  </cmdsynopsis>

  <sect2 id="commands-bdr-init-copy-options" xreflabel="Options for bdr_init_copy">
   <title>Options</title>

   <para>
    The following command-line options control the behaviour of
    <application>bdr_init_copy</>.
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        Data directory of the new node.
       </para>
       <para>
        This can be either a postgres data directory backed up from the source
        node (as discussed above) or an empty directory. In case of empty
        directory, the full backup of the source node will be made using
        <application>pg_basebackup</application>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n <replaceable class="parameter">nodename</replaceable></option></term>
      <term><option>--node-name=<replaceable class="parameter">nodename</replaceable></option></term>
      <listitem>
       <para>
        Name of the new node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--replication-sets=<replaceable class="parameter">sets</replaceable></option></term>
      <listitem>
       <para>
        Comma separated list of replication set names to use.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option></term>
      <listitem>
       <para>
        Stop the node after creation. The default behavior is to start the new
        node once it's setup.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--postgresql-conf=<replaceable class="parameter">postgresql.conf</replaceable></option></term>
      <listitem>
       <para>
        Path to postgresql.conf file which will be used by the new node. If not
        specified, the postgresql.conf will be copied from the source node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--hba-conf=<replaceable class="parameter">hba.conf</replaceable></option></term>
      <listitem>
       <para>
        Path to hba.conf file which will be used by the new node. If not
        specified, the hba.conf will be copied from the source node.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--recovery-conf=<replaceable class="parameter">recovery.conf</replaceable></option></term>
      <listitem>
       <para>
        Path to recovery.conf template file which will be used during the
        physical initialization of the node.
       </para>
       <para>
        This parameter is useful if you can't use streaming replication for
        initial synchronization and you want to use <varname>archive_command</>
        instead.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--log-file=<replaceable class="parameter">bdr_init_copy_postgres.log</replaceable></option></term>
      <listitem>
       <para>
        Path to the log file that bdr_init_copy will write <command>postgres</command>
        output to when it starts temporary postgres instances during setup. Defaults
        to <literal>bdr_init_copy_postgres.log</literal> in the current directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--apply-delay=<replaceable class="parameter">0</replaceable></option></term>
      <listitem>
       <para>
        This option is the same as the <replaceable>apply_delay</replaceable> option to
        <function><link linkend="function-bdr-group-join">bdr_group_join</link></function>.
        It is mainly useful for testing - including crude latency simulation -
        and debugging.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    The following command-line options specify the source node to connect to.

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></></term>
      <term><option>--remote-dbname=<replaceable class="parameter">dbname</replaceable></></term>
      <listitem>
      <para>
       Specifies the name of the database to connect to. This is
       equivalent to specifying <replaceable
       class="parameter">dbname</replaceable> as the first non-option
       argument on the command line.
      </para>
      <para>
       If this parameter contains an <symbol>=</symbol> sign or starts
       with a valid <acronym>URI</acronym> prefix
       (<literal>postgresql://</literal>
       or <literal>postgres://</literal>), it is treated as a
       <parameter>conninfo</parameter> string.
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>--remote-host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        Specifies the host name of the machine on which the server is
        running.  If the value begins with a slash, it is used as the
        directory for the Unix domain socket. The default is taken
        from the <envar>PGHOST</envar> environment variable, if set,
        else a Unix domain socket connection is attempted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--remote-port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        Specifies the TCP port or local Unix domain socket file
        extension on which the server is listening for connections.
        Defaults to the <envar>PGPORT</envar> environment variable, if
        set, or a compiled-in default.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>--remote-user=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        User name to connect as.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    The following command-line options specify local connection to the newly
    created node.

    <variablelist>
     <varlistentry>
      <term><option>--local-dbname=<replaceable class="parameter">dbname</replaceable></></term>
      <listitem>
      <para>
       Specifies the name of the database to connect to. This is
       equivalent to specifying <replaceable
       class="parameter">dbname</replaceable> as the first non-option
       argument on the command line.
      </para>
      <para>
       If this parameter contains an <symbol>=</symbol> sign or starts
       with a valid <acronym>URI</acronym> prefix
       (<literal>postgresql://</literal>
       or <literal>postgres://</literal>), it is treated as a
       <parameter>conninfo</parameter> string.
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--local-host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        Specifies the host name of the machine on which the server is
        running.  If the value begins with a slash, it is used as the
        directory for the Unix domain socket. The default is taken
        from the <envar>PGHOST</envar> environment variable, if set,
        else a Unix domain socket connection is attempted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--local-port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        Specifies the TCP port or local Unix domain socket file
        extension on which the server is listening for connections.
        Defaults to the <envar>PGPORT</envar> environment variable, if
        set, or a compiled-in default.
       </para>
       <para>
        <application>bdr_init_copy</application> does <emphasis>not</emphasis>
        modify <filename>postgresql.conf</filename> on the new node to use this
        port. If it is different to the remote port (e.g. when local and remote
        nodes are on the same machine and would otherwise have conflicting
        ports), supply a modified configuration with
        <literal>--postgresql-conf</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--local-user=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        User name to connect as.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

  </sect2>
 </sect1>

 <sect1 id="command-bdr-initial-load" xreflabel="bdr_initial_load">
  <title>bdr_initial_load</title>

  <para>
   <application>bdr_initial_load</application> is an internal utility command
   invoked by &bdr; when joining or subscribing. It is not intended for
   end-user use, and may not be present in future versions of the system.
  </para>

 </sect1>

</chapter>
