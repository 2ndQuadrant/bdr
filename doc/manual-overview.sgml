<chapter id="overview" xreflabel="Overview">
 <title>&bdr;/&udr; overview</title>

 <sect1 id="bdr-udr-concepts">
  <title>&bdr; &amp; &udr; concepts</title>

  <para>
   The &bdr; (Bi-Directional Replication for PostgreSQL) project adds
   multi-master asynchronous logical replication to PostgreSQL 9.4 and
   above.
  </para>

  <para>
   This means that you can write to any server and the changes will, after they
   have been committed, be sent row-by-row to all the aother servers that are
   part of the same BDR group<footnote><simpara>We'd say "cluster", but
   PostgreSQL has historically used that term for a different and confusing
   purpose, to mean a particular PostgreSQL instance's collection of
   databases.</simpara></footnote>.
  </para>

  <para>
   More specifically:
   <variablelist>

    <varlistentry>
     <term>Multi-master</term>
     <listitem>
      <simpara>
       Each database ("node") participating in a &bdr; group both receives
       changes from other members and can be written to directly by the user.
       This is distinct from hot or warm standby, where only the single master
       server that all others replicate from can be written to.
      </simpara>

      <simpara>
       You don't have to use multi-master with &bdr;, it's possible to use it
       for one-way replication too.
      </simpara>

      <simpara>
       If you're interested in &bdr;'s multi-master features it's important to
       understand some of the concepts behind multi-master, both in general and
       as &bdr; implements it.  Application developers
       <emphasis>must</emphasis> be aware that applications may need changes
       for multi-master &bdr; and cannot be written exactly as if they are
       talking to a standalone or single-master system. See <xref
       linkend="weak-coupled-multimaster">.
      </simpara>

     </listitem>
    </varlistentry>

    <varlistentry>
     <term>asynchronous</term>
     <listitem>
      <simpara>
       Changes made on one &bdr; node are not replicated to other nodes before
       they are committed locally. As a result the data is not exactly the
       same on all nodes at any given time; some nodes will have data that
       has not yet arrived at other nodes. PostgreSQL's block-based replication
       solutions default to asynchronous replication as well.
      </simpara>

      <simpara>
       Support for synchronous writes may be added to a future &bdr; release
       and some support for synchronous replication already exists for
       one-way (single-master) replication.
      </simpara>

      <simpara>
       When combined with multi-master, asynchronous replication is often
       called an "eventually consistent" architecture. At any given time
       the data can look different when viewed from different nodes, but
       over time the nodes sync with each other. If writes stop then after
       a while all nodes will be the same. &bdr; ensures that
       constraints (unique constraints, check constraints, foreign keys, etc)
       are always consistent within any given node, so it's stricter
       than many eventually consistent designs.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>logical</term>
     <listitem>
      <simpara>
       Logical (row-based) replication is replication using individual row values. It
       contrasts with physical (block-based) replication where changes to data blocks
       are sent. Logical replication is at a different level - it's a lot like
       the difference between sending a set of files and sending the hard drive
       the files are on. Logical replication has both advantages and disadvantages
       compared to physical replication; see <xref linkend="logical-vs-physical">.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>replication</term>
     <listitem>
      <simpara>
       Replication is the process of copying data from one place to another. In
       &bdr; refers to the fact that &bdr; is not a shared-storage architecture;
       each node has its own copy of the database, including all relevant
       indexes etc. Nodes can satisfy queries without needing to communicate
       with other nodes, but must also have enough storage space to hold all the
       data in the database.
      </simpara>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>

  <para>
   &bdr; is built on the <ulink url="http://www.postgresql.org/docs/current/static/logicaldecoding.html">
   logical decoding</ulink> features developed by the &bdr; project and added
   to PostgreSQL 9.4. It also relies on other core PostgreSQL features that
   were added with &bdr; in mind, like background workers.
  </para>

  <para>
   Because &bdr; needs some features that didn't make it into PostgreSQL by the
   time 9.4 was released, it needs a modified PostgreSQL to run. See <xref
   linkend="bdr-requirements">.
  </para>

  <para>
   That's why we've also released &udr; - Uni-Directional Replication for PostgreSQL.
   &udr; is just &bdr; with support for things that won't work on unmodified PostgreSQL
   removed. Most importantly it can only replicate in one direction, so it
   doesn't support multi-master, and it cannot replicate DDL (schema changes).
   &udr; is mainly useful for read-replicas and for performing minimal-downtime
   upgrades to new PostgreSQL versions (or to PostgreSQL 9.4 with &bdr;). You can
   get &udr; from the same download locations as &bdr; (and in fact it's the same
   source code, just with different options). See <xref linkend="how-bdr-works">
   for more on the differences between &bdr; and &udr;.
  </para>

 </sect1>

 <sect1 id="logical-vs-physical"
        xreflabel="Differences between logical and physical replication">
  <title>Differences between logical (row level) and physical (block level) replication</title>

  <para>
   &bdr;/&udr; use
   <ulink url="http://www.postgresql.org/docs/current/static/logicaldecoding.html">&postgres;'s logical decoding feature</ulink>
   to implement a low overhead logical replication solution. It has significant
   advantages - and some disadvantages - when compared to PostgreSQL's older
   physical (block-based)
   <ulink url="http://www.postgresql.org/docs/current/static/warm-standby.html#STREAMING-REPLICATION">streaming</ulink>
   or
   <ulink url="http://www.postgresql.org/docs/current/static/warm-standby.html">archive-based</ulink>
   replication with warm or
   <ulink url="http://www.postgresql.org/docs/current/static/hot-standby.html">hot standby</ulink>
  </para>

  <para>
   Logical replication has a different set of trade-offs to physical
   block-based replication. It isn't clearly better or worse. Physical
   replication is a lot simpler, has less lag for big transactions, is
   supported by older versions and may require less disk I/O, but generally
   consumes more network bandwidth, can't replicate a subset of databases or
   tables, and can't support multi-master or cross-version/cross-arch
   replication. Which solution you should use depends on what you need to do.
  </para>

  <para>
   The major differences between physical replication and logical replication as implemented by &bdr;/&udr; are:
   <itemizedlist>
    <listitem>
     <simpara>Multi-master replication is possible (&bdr; only). All members are writable nodes that replicate changes.</simpara>
    </listitem>
    <listitem>
     <simpara>Data from index writes, <literal>VACUUM</literal>, hint bits, etc are not sent over the network, so bandwidth requirements may be reduced - especially when compared to physical replication with <literal>full_page_writes</literal>.</simpara>
    </listitem>
    <listitem>
     <simpara>There is no need to use <ulink url="http://www.postgresql.org/docs/current/static/runtime-config-replication.html#GUC-HOT-STANDBY-FEEDBACK"><literal>hot_standby_feedback</literal></ulink> or to cancel long running queries on hot standbys, so there aren't any <quote>cancelling statement due to conflict with recovery</quote> errors.</simpara>
    </listitem>
    <listitem>
     <simpara>Temporary tables may be used on replicas.</simpara>
    </listitem>
    <listitem>
     <simpara>Tables that aren't being replicated from elsewhere may be written to (&udr; and &bdr;).</simpara>
    </listitem>
    <listitem>
     <simpara>Replication across major versions (e.g. 9.4 to 9.5) is supported.</simpara>
    </listitem>
    <listitem>
     <simpara>Replication across architectures and OSes (e.g. PPC64 Linux to x86_64 OS X) is supported.</simpara>
    </listitem>
    <listitem>
     <simpara>Replication is per-database (or finer grained), wheras physical replication can and must replicate all databases.</simpara>
    </listitem>
    <listitem>
     <simpara>&bdr;'s logical replication implementation imposes some restrictions on supported DDL (see: <xref linkend="ddl-replication">) that do not apply for physical replication</simpara>
    </listitem>
    <listitem>
     <simpara>Commands that affect all databases, like <literal>ALTER SYSTEM</literal> or <literal>CREATE ROLE</literal> are <emphasis>not</emphasis> replicated by &bdr;/&udr; and must be managed by the administrator.</simpara>
    </listitem>
    <listitem>
     <simpara>Disk random I/O requirements and flush frequency may be higher than for physical replication.</simpara>
    </listitem>
    <listitem>
     <simpara>Only completed transactions are replicated. Big transactions may have longer replication delays because replication doesn't start until the transaction completes. Aborted transactions' writes are never replicated at all.</simpara>
    </listitem>
    <listitem>
     <simpara>Logical replication requires at least PostgreSQL 9.4.</simpara>
    </listitem>
    <listitem>
     <simpara>Logical replication cannot be used for point-in-time recovery (though it can support a replication delay).</simpara>
    </listitem>
    <listitem>
     <simpara>Logical replication only works via streaming, not WAL file archiving, and requires the use of a <ulink url="http://www.postgresql.org/docs/current/static/logicaldecoding-explanation.html">replication slot</ulink>.</simpara>
    </listitem>
    <listitem>
     <simpara>Cascading replication is not (yet) supported by logical replication.</simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Most users will want to use physical replication and/or WAL archiving for
   redundancy, high availability, backup and PITR.  Logical replication is well
   suited to data integration, data movement and data aggregation (often as an
   alternative to or combined with ETL), for scale-out and for distributed
   multi-master deployments.
  </para>

  <para>
   It's possible to replicate between different PostgreSQL versions, operating systems
   and/or processor architectures using logical replication because it can fall back
   to sending data in text form - just like SQL. Where the servers are compatible
   it can use the faster-to-process binary representation or an intermediate form.
   Logical replication cannot prevent all possible incompatibilities though - for
   example, it isn't possible to replicate a type added in PostgreSQL 9.5 to PostgreSQL
   9.4 because 9.4 has no way to store and represent it.
  </para>

  <para>
   Unlike physical replication, which replicates all databases on a PostgreSQL
   install, logical decoding permits (and requires) separate replication of
   each database. It can also replicate a subset of tables within a database.
   It is not possible to configure wildcard replication of all databases on a
   server in logical replication. You can replicate multiple databases, but
   each database must be configured separately.
  </para>

  <para>
   Temporary tables may always be created on all nodes, even if they are also
   receiving replicated data. There's no prohibition against doing so like it
   exists for &postgres;'s block-level replication features.
  </para>

  <para>
   Local writes are not limited to temporary tables.
   <literal>UNLOGGED</literal> tables may be created even on nodes that are
   receiving changes from upstream/peer nodes. Additionally, replication sets
   allow changes to only a subset of tables to be replicated if desired, so some
   normal tables may be excluded from replication.  This makes &bdr;/&udr; very
   useful for use cases where significant work is done on nodes that also
   receive replicated data from elsewhere.
  </para>

  <para>
   Logical replication doesn't start replicating a transaction until it
   commits. This can cause longer replication delays for big transactions than
   physical replication, where the transaction's changes get replicated as soon
   as they're written. It also lets logical replication entirely skip
   replication of writes by aborted transactions. Future enhancements to
   logical decoding may permit streaming of transactions before they're
   committed.
  </para>

  <para>
   Because logical replication is only supported in streaming mode (rather
   than WAL archiving) it isn't suitable for point-in-time recovery. Logical
   replication may be used in conjunction with streaming physical replication
   and/or PITR, though; it is not necessary to choose one or the other.
  </para>

 </sect1>

 <sect1 id="bdr-vs-trigger-based" xreflabel="Differences between &bdr; and trigger-based replication">
  <title>Differences between &bdr; and trigger-based replication</title>

  <para>
   There are a number of trigger-based logical replication solutions for
   PostgreSQL, including
   <ulink url="https://wiki.postgresql.org/wiki/SkyTools">Londiste</ulink>,
   <ulink url="http://slony.info/">Slony-I</ulink> and
   <ulink url="https://bucardo.org/">Bucardo</ulink>. They're mature, fairly
   widely used and powerful, and like &bdr; they have the advantages (and
   disadvantages) of logical replication.
  </para>

  <para>
   As with the comparison with physical replication, &bdr; offers advantages
   over trigger-based replication solutions but also has some downsides.
  </para>

  <para>
   All trigger-based replication solutions suffer from inherent
   write-amplification, where each write to the database produces a
   corresponding write to a replication log table. Both the original write and
   the write to the replication log get recorded in WAL as well as the heap, so
   each write actually happens four times. By reading and processing WAL
   for data to replicate &bdr; avoids this write amplification, so writes
   to a &bdr;-replicated database only get written twice - like any other
   durable write on PostgreSQL.
  </para>

  <para>
   Trigger-based replication also requires an external d&aelig;mon process on
   the sending and/or receiving side. &bdr; runs its management processes
   inside PostgreSQL its self, so there's no separate replication process
   to manage.
  </para>

  <para>
   At the time of writing, systems like Londiste have a number of features for
   which &bdr; has no corresponding capability. Londiste can synchronise and
   compare tables between the publisher and subscriber. Slony-I supports
   events and confirmations. Slony-I provides infrastructure for handling
   DDL while also running on unmodified PostgreSQL 9.4. Bucardo supports
   multi-master on unmodified PostgreSQL 9.4. So while &bdr; offers some
   significant benfits it won't suit every need and every workload. Evaluate
   your needs carefully before choosing a technology.
  </para>

 </sect1>

 <sect1 id="weak-coupled-multimaster"
        xreflabel="&bdr;: Weakly coupled multi-master replication">
  <title>&bdr;: weakly coupled multi-master replication</title>

  <para>
   When considering multi-master clustering or replication (with &bdr;
   or another technology) it is important to understand what's involved,
   and that not all multi-master systems are equal.
  </para>

  <note>
   <para>
    You don't have to use &bdr; for multi-master. It's quite reasonable
    to write to only one node, using &bdr; like an improved read-replica
    system. It's also possible to make sure that any given table/schema
    is only written to on one particular node, so no conflicts can arise.
    You still have to consider replication lag, but no more or less than with
    normal hot standbys. It only gets complicated when your application writes
    to the same tables on multiple nodes at once. If you need to do that,
    keep reading.
   </para>
  </note>

  <para>
   Some multi-master systems are <emphasis>tightly-coupled</emphasis>; these
   tend to make all nodes appear to be part of the same virtual database to
   outside clients, complete with cross-node locking, transaction isolation,
   etc. They also often - but not always - use shared storage, where each node
   connects to the same underlying database files over a SAN or similar. This
   makes life easier for application developers who're used to working with
   stand-alone or single-master databases because they can do everything just
   like they did before. Like with anything there's a price, though: a tightly
   coupled multi-master system does not scale out very well, especially for
   writes, and isn't very tolerant of latency, node outages, or network
   partitions.
  </para>

  <para>
   Other systems are <emphasis>loosely-coupled</emphasis>. They don't attempt
   to appear like a single seamless virtual database, and applications can see
   some differences depending on which node they are connected to. Most loosely
   coupled systems don't share storage; instead each node has a copy of the whole
   database or a subset of it locally. If they store only a subset of the data they
   may support routing queries to the correct node, or they may expect the application
   to determine which node to find data on. There is generally no global lock
   manager or transaction manager, so transactions on one node aren't affected
   by locks taken on other nodes. Many loosely coupled systems are asynchronous
   and eventually consistent (see: <xref linkend="bdr-udr-concepts">) so changes
   on one node aren't immediately visible on all other nodes at the same time.
   This can make application development more difficult, but in exchange makes
   the system very tolerant of latency between nodes, temporary network
   partitions or node outages, etc, and makes scale-out more efficient.
  </para>
  
  <para>
   &bdr; is a loosely coupled shared-nothing multi-master design.
  </para>

  <para>
   This is a broad and overly simplified characterisation of replication, but
   it's enough to explain why applications that use &bdr; for multi-master
   writes need to be aware of the anomalies that can be introduced by
   asynchronous multi-master replication. It should also help illustrate
   that applications get some significant benefits in exchange:
   <itemizedlist>
    <listitem>
     <simpara>
      Applications using &bdr; are free to write to any node so long as they
      are careful to prevent or cope with conflicts.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      There is no complex election of a new master if a node goes down or
      network problems arise. There is no wait for failover. Each node is
      always a master and always directly writeable.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      The application can be geographically distributed so that the app and is
      close to the data and the user for better performance and availability.
      Reads can be satisfied locally.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Applications can be partition-tolerant: the application can keep keep
      working even if it loses communication with some or all other nodes, then
      re-sync automatically when connectivity is restored. Loss of a critical
      VPN tunnel or WAN won't bring the entire store or satellite office to a
      halt.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   With the advantages come challenges.
  </para>

  <para>
   Because &bdr; replicates asynchronously, not all nodes have the same view of
   the data at any given instant. On a single node it is guaranteed that
   committed transactions' changes become visible immediately to newly started
   transactions (or in <literal>READ COMMITTED</literal> mode, statements).
   This isn't true in &bdr; - if you <literal>COMMIT</literal> a transaction
   that changes a row on one node, then <literal>SELECT</literal> that row on
   another node, you may well still get the old value. Applications must
   therefore be designed to be tolerant of stale data or to be "sticky" to a
   node, where they prefer read data from the same node they write it to.
   This is also true of applications using PostgreSQL's physical replication
   feature unless it is used in synchronous mode with only one replica, so
   it's a challenge that's far from unique to &bdr;.
  </para>

  <para>
   Locking operations are not replicated to other nodes. If you lock a row
   or table in one node the other nodes have no idea it is locked elsewhere.
   Applications that rely on row or table locking for correctness will
   only work correctly if all their writes and locked reads occur on a
   single node. Applications might rely on locking explicitly via
   <literal>LOCK TABLE</literal> or
   <literal>SELECT ... FOR UPDATE / SHARE</literal>, but most applications
   rely on it implicitly via <literal>UPDATE</literal> and
   <literal>DELETE</literal> row-locking, so the absence of explicit locking
   does not mean an app is automatically multi-master safe.
  </para>

  <para>
   Because of asynchronous replication and the lack of global locking,
   it is possible for transactions on different nodes to perform actions
   that could not happen if both transactions ran on a single node.
   These are called <emphasis>conflicts</emphasis> and are discussed in detail
   separately; see <xref linkend="conflicts">. &bdr; can resolve
   conflicts using a simple last-update-wins strategy or using user-defined
   conflict handlers. Either way the application design needs to consider
   that conflicts may occur, and where possible minimise them. Na&iuml;ive
   applications that ignore the the possibility of conflicts when writing
   to multiple masters may suffer from lost-updates and other undesirable
   data anomalies.
  </para>

  <para>
   &bdr; provides some tools to help make application design easier.  The most
   important is <xref linkend="global-sequences">, which provide a
   &bdr;-group-wide generator of unique values for use in synthetic keys.
   Others are discussed in the <xref linkend="conflicts"> section.
  </para>

 </sect1>

 <sect1 id="how-bdr-works" xreflabel="How &bdr; and &udr; work">
  <title>How &bdr; and &udr; work</title>

  <sect2>
   <title>Differences between &bdr; and &udr;</title>

   <!-- NEEDS-REVIEW -->

   <para>
    The most important difference between &bdr; and &udr; is that
    with &bdr; changes can be made on both nodes; and that methods
    for resolving conflicts arising due to that exist.
   </para>

   <sect3>
    <title>Primary Usecases for &udr;</title>

    <para>
     If changes are only ever made on one node and the others are
     just used for read scalability (including temporary tables on
     standbys), seamless major version upgrades or combining data
     from different nodes &udr; is sufficient. These scenarios cover
     a large number of replication scenarios.
    </para>

    <para>
     Using &udr; can noticeably reduce the likelihood of application
     incompatibilities. Only one database will be written to, which prevents
     conflicts and such. On the other hand, a &bdr; setup can make failover
     much easier, because there is no need to change the setup.
    </para>

   </sect3>

   <sect3>
    <title>Primary Usecases for &udr;</title>
    <para>
     <!-- NEEDS-REVIEW -->
    </para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 id="bdr-requirements" xreflabel="&bdr;/&udr; requirements">
  <title>&bdr; / &udr; requirements</title>

  <para>
   To use logical replication via &bdr; or &udr; you will need PostgreSQL 9.4
   or newer. Earlier versions are not supported and will never be supported.
  </para>

  <para>
   Currently &bdr; requires a modified version of PostgreSQL 9.4. This modified
   PostgreSQL adds functionality BDR needs to support DDL replication, multi-master
   last-update-wins conflict resolution, user-defined conflict handlers, etc. This
   modified version of PostgreSQL 9.4 is available from the &bdr; download page
   alongside the extension in both package and source form. This requirement
   means that <emphasis>you can't use &bdr; on unmodified PostgreSQL 9.4</emphasis>.
   <note>
    <simpara>
      All the new features required have been submitted for inclusion in
      PostgreSQL 9.5. Many have already been accepted and included. If all the
      functionality &bdr; requires is added to PostgreSQL 9.5 then the need for
      a modified PostgreSQL will go away in the next version.
    </simpara>
   </note>
   Some of these modifications make small changes to how PostgreSQL stores
   data on disk. As a result the modified PostgreSQL 9.4 used by &bdr; can't
   load data directories from unmodified PostgreSQL and vice versa. Users
   must dump and reload their database(s) to switch to a &bdr;-capable PostgreSQL,
   or use &udr; for online-upgrade. See <xref linkend="installation">.
  </para>

  <para>
   &udr; runs on standard PostgreSQL 9.4 and is installed like any other
   extension. It is a cut-down version of BDR that can work with only
   the features present in PostgreSQL 9.4; see <xref linkend="bdr-udr-concepts">.
  </para>

  <para>
   As of the version this documentation was written for PostgreSQL 9.5 is
   not yet supported. Neither is Microsoft Windows. Both of these limits
   will be removed by a later release so check the
   <ulink url="http://2ndquadrant.com/BDR">&bdr; website</ulink> for
   the latest information.
  </para>

 </sect1>

</chapter>
