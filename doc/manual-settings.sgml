<chapter id="settings" xreflabel="Configuration Settings">
 <title>Configuration Settings</title>

 <indexterm>
  <primary>Configuration Settings</primary>
  <secondary>of the server</secondary>
 </indexterm>

 <sect1 id="settings-prerequisite" xreflabel="PostgreSQL settings for BDR">
  <title>Prerequisite &postgres; parameters</title>

  <para>
   &bdr; require certain &postgres; settings to be set to appropriate values.
  </para>

  <para>
   <variablelist>

    <varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
     <term><varname>max_worker_processes</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_worker_processes</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       For &bdr; this has to be set to a big
       enough value to have one worker per configured database, and
       one worker per connection.
      </para>
      <para>
       For more detailed information about this parameter consult
       the &postgres;
       <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES'>documentation</ulink>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
     <term><varname>max_replication_slots</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_replication_slots</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       For &bdr; this needs to be set big
       enough so that every connection to this node has a free
       replication slot.
      </para>
      <para>
       For more detailed information about this parameter consult
       the &postgres;
       <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-replication.html#GUC-MAX-REPLICATION-SLOTS'>documentation</ulink>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
     <term><varname>max_wal_senders</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_wal_senders</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       For &bdr; this needs to be set big
       enough so that every connection to this node has a free wal
       sender process.
      </para>
      <para>
       If a node also does streaming base backups and/or base
       backups using <application>pg_basebackup</application>, the
       value needs to be big enough to accomodate both that
       and &bdr;.
      </para>

      <para>
       For more detailed information about this parameter consult
       the &postgres;
       <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-replication.html#GUC-MAX-WAL-SENDERS'>documentation</ulink>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
     <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       For &bdr; this parameter has to
       include <literal>bdr</literal> as one of the comma separated
       values. The parameter can only be changed at server start.
      </para>
      <para>
       For more detailed information about this parameter consult
       the &postgres;
       <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES'>documentation</ulink>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
     <term><varname>track_commit_timestamp</varname> (<type>bool</type>)
      <indexterm>
       <primary><varname>track_commit_timestamp</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       To use &bdr; this parameter has to
       be set to <literal>true</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-wal-level" xreflabel="wal_level">
     <term><varname>wal_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_level</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       For &bdr; this parameter has to be
       set to <literal>logical</literal>.
      </para>

      <para>
       For more detailed information about this parameter consult
       the &postgres;
       <ulink url='http://www.postgresql.org/docs/current/interactive/runtime-config-wal.html#GUC-WAL-LEVEL'>documentation</ulink>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-default-sequenceam" xreflabel="default_sequenceam">
     <term><varname>default_sequenceam</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_sequenceam</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Only present in &bdr;. Controls the type of sequence created by unqualified
       <literal>CREATE SEQUENCE</literal> commands and by <literal>SERIAL</literal>
       and <literal>BIGSERIAL</literal>. See <xref linkend="global-sequences">.
       May be set per-session with <literal>SET</literal>.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect1>

 <sect1 id="bdr-configuration-variables" xreflabel="BDR-specific configuration variables">
  <title>&bdr; specific configuration variables</title>

  <para>
   The &bdr; extension exposes a number of configuration parameters via
   PostgreSQL's usual configuration mechanism. You can set these in the same
   way as any other setting, via <literal>postgresql.conf</literal> or using
   <literal>ALTER SYSTEM</literal>. Some variables can also be set per-user,
   per-database or per-session, but most require a server reload or a full
   server restart to take effect.
  </para>

  <para>
   <variablelist>

    <varlistentry id="guc-bdr-conflict-logging-include-tuples" xreflabel="bdr.conflict_logging_include_tuples">
     <term><varname>bdr.conflict_logging_include_tuples</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bdr.conflict_logging_include_tuples</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Log whole tuples when logging &bdr; tuples. Requires a server reload to take effect.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-bdr-log-conflicts-to-table" xreflabel="bdr.log_conflicts_to_table">
     <term><varname>bdr.log_conflicts_to_table</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bdr.log_conflicts_to_table</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       This boolean option controls whether
       detected &bdr; conflicts get logged
       to the bdr.bdr_conflict_history table. See Conflict logging
       for details. <!-- FIXME: Add link to not yet existing
                         conflict logging chapter-->
       Requires a server reload to take effect.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-bdr-synchronous-commit" xreflabel="bdr.synchronous_commit">
     <term><varname>bdr.synchronous_commit</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bdr.synchronous_commit</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       This boolean option controls whether
       the <varname>synchronous_commit</varname> setting
       in &bdr; apply workers is enabled. It defaults
       to <literal>off</literal>.  If set to <literal>off</literal>,
       &bdr; apply workers will perform
       asynchronous commits,
       allowing &postgres; to
       considerably improve throughput.
      </para>
      <para>
       It it always is safe to set in the sense that it'll never
       cause transactions to not be replayed. If it's important that
       nodes replicate data as soon as possible, so loss of a node causes
       minimal loss of data that's still only on that node, you should
       set this to <literal>on</literal> and configure &postgres;'s synchronous
       replication.
      </para>
      <note>
       <para>
        Using synchronous commit and synchronous replication will
        <emphasis>not</emphasis> prevent the apply conflicts that
        arise with multi-master use of BDR. There is still no
        locking between nodes and no global snapshot management
        so concurrent transactions on different nodes can still
        change the same tuple. See the <xref linkend="overview">.
       </para>
      </note>
      <para>
       Enabling PostgreSQL's synchronous replication but leaving
       <varname>bdr.synchronous_commit</varname> disabled is
       not generally adviseable. It will noticeably increase the
       time until a transaction is confirmed to have been
       replicated. That's because it can only be reported as having
       safely committed once the <acronym>WAL</acronym> is flushed
       on the receiving side.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-temp-dump-directory" xreflabel="bdr.temp_dump_directory">
     <term><varname>bdr.temp_dump_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>bdr.temp_dump_directory</varname> configuration parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Specifies the path to a temporary storage location, writable
       by the postgres user, that needs to have enough storage space
       to contain a complete dump of the a potentially cloned
       database.
      </para>
      <para>
       This setting is only used during initial bringup via logical copy.
       It is not used by <application>bdr_init_copy</application>.
      </para>
     </listitem>
    </varlistentry>

     <varlistentry id="guc-bdr-max-ddl-lock-delay" xreflabel="bdr.max_ddl_lock_delay">
      <term><varname>bdr.max_ddl_lock_delay</varname> (<type>milliseconds</type>)
       <indexterm>
        <primary><varname>bdr.max_ddl_lock_delay</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Controls how long a DDL lock attempt can wait for concurrent write transactions
	to commit or roll back before it forcibly aborts them.
	<literal>-1</literal> (the default) uses the value of
	<literal>max_standby_streaming_delay</literal>. Can be set with time units
	like <literal>'10s'</literal>. See <xref linkend="ddl-replication-locking">.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-ddl-lock-timeout" xreflabel="bdr.ddl_lock_timeout">
      <term><varname>bdr.ddl_lock_timeout</varname> (<type>milliseconds</type>)
       <indexterm>
        <primary><varname>bdr.ddl_lock_timeout</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
	Controls how long a DDL lock attempt can wait to acquire the lock. The
	default value <literal>-1</literal> (the default) uses the value of
	<literal>lock_timeout</literal>. Can be set with time units like
	<literal>'10s'</literal>. See <xref linkend="ddl-replication-locking">.
	Note that once the DDL lock is acquired and the DDL operation begins
	this timer stops ticking; it doesn't limit the overall duration a DDL
	lock may be held, only how long a transaction can wait for one to
	be acquired. To limit overall duration use a
	<literal>statement_timeout</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-permit-ddl-locking" xreflabel="bdr.permit_ddl_locking">
      <term><varname>bdr.permit_ddl_locking</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.permit_ddl_locking</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Allow sessions to run DDL commands that acquire the global DDL lock. See
        <xref linkend="ddl-replication"> for details on the DDL lock. Setting this
        to off by default means that unintended DDL that can be disruptive to
        production is prevented.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-trace-ddl-locks-level" xreflabel="bdr.trace_ddl_locks_level">
      <term><varname>bdr.trace_ddl_locks_level</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.trace_ddl_locks_level</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Override the default debug log level for BDR DDL locking (used in 
	<xref linkend="ddl-replication">) so that
        DDL-lock related messages are emitted at the LOG debug level instead.
        This can be used to trace DDL locking activity on the system without
        having to configure the extremely verbose DEBUG1 or DEBUG2 log levels
        for the whole server.
       </para>
       <para>
        In increasing order of verbosity, settings are <literal>none</literal>,
        <literal>statement</literal>, <literal>acquire_release</literal>,
        <literal>peers</literal> and <literal>debug</literal>. At <literal>
        none</literal> level DDL lock messages are only emitted at DEBUG1 and
        lower server log levels. <literal>statement</literal> adds
        <literal>LOG</literal> output whenever a statement causes an attempt to
        acquire a DDL lock. <literal>acquire_release</literal> also records
        when the lock is actually acquired and when it's subsequently released,
        or if it's declined, and records when peer nodes apply a remote DDL lock.
        <literal>peer</literal> adds more detail about the negotiation between
        peer nodes for DDL locks, and <literal>debug</literal> forces everything
        DDL-lock-related to be logged at <literal>LOG</literal> level.
       </para>
       <para>
        Changes take effect on server configuration reload, a restart is not
        required.
       </para>
       <para>
        See also <xref linkend="monitoring-ddl-lock">.
       </para>
      </listitem>
     </varlistentry>

   </variablelist>

  </para>

  <sect2>
   <title>Less common or internal configuration variables</title>
   <para>
    <variablelist>

     <varlistentry id="guc-bdr-default-apply-delay" xreflabel="bdr.default_apply_delay">
      <term><varname>bdr.default_apply_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bdr.default_apply_delay</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Sets a default apply delay for all configured connections
        that don't have a explicitly configured apply delay.
       </para>
       <para>
        This is primarily useful to simulate a high latency network
        in a low latency testing environment. It requires a server
        reload to take effect.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-skip-ddl-locking" xreflabel="bdr.skip_ddl_locking">
      <term><varname>bdr.skip_ddl_locking</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.skip_ddl_locking</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Only affects &bdr;. Prevents acquisiton of the the global
        DDL lock when executing DDL statement. This is mainly
        used internally, but can also be useful in other cases.  This
        option can be set at any time, but only by superusers.
       </para>
       <warning>
        <para>
         Inconsiderate usage of this option easily allows to break
         replication setups.
        </para>
       </warning>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-permit-unsafe-ddl-commands" xreflabel="bdr.permit_unsafe_ddl_commands">
      <term><varname>bdr.permit_unsafe_ddl_commands</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.permit_unsafe_ddl_commands</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Only affects &bdr;. Permits execution of schema
        changes that cannot safely be replicated. This is primarily
        used internally, but can also be used in other cases.  This
        option can be set at any time, but only by superusers.
       </para>
       <warning>
        <para>
         Inconsiderate usage of this option easily allows to break
         replication setups.
        </para>
       </warning>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-bdr-skip-ddl-replication" xreflabel="bdr.skip_ddl_replication">
      <term><varname>bdr.skip_ddl_replication</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.skip_ddl_replication</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Only affects &bdr;. Skips replication of DDL changes
        made in a session where this option is set to other systems.
        This is primarily useful
        for &bdr; internal use, but also can
        be used for some intentional schema changes like adding a
        index only on some nodes. This option can be set at any time,
        but only by superusers.
       </para>
       <warning>
        <para>
         Inconsiderate usage of this option easily allows to break
         replication setups.
        </para>
       </warning>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-do-not-replicate" xreflabel="bdr.do_not_replicate">
      <term><varname>bdr.do_not_replicate</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.do_not_replicate</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        This parameter is intended for internal use only. Changes made in a
        transaction with this parameter set will not be queued for replication
        to other nodes.
       </para>
       <warning>
        <para>
         Inconsiderate usage of this option easily allows to break
         replication setups.
        </para>
       </warning>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-trace-replay" xreflabel="bdr.trace_replay">
      <term><varname>bdr.trace_replay</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.trace_replay</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        When <literal>on</literal>, emits a log message for each remote action
        processed by a BDR downstream apply worker. The message records the
        change type, the table affected, the number of changes since xact
        start, the xact's commit lsn, commit time, the upstream node and which
        node it was forwarded from if any. Queued DDL commands and table drops
        are also printed. The additional logging has a performance impact and
        should not be enabled when not required.
       </para>
       <para>
        Changes take effect on server configuration reload, a restart is not
        required.
       </para>
       <note>
        <para>
         Row field contents are not shown. Recompile BDR with
         <literal>VERBOSE_INSERT</literal>, <literal>VERBOSE_UPDATE</literal>
         and <literal>VERBOSE_DELETE</literal> defined if you want row values.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bdr-extra-apply-connection-options" xreflabel="bdr.extra_apply_connection_options">
      <term><varname>bdr.extra_apply_connection_options</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>bdr.extra_apply_connection_options</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Add connection parameters to all connections made by BDR nodes to their peers. This is useful
        for configuring keepalives, SSL modes, etc. Settings given in an individual node's configured
        connection string will override these options and BDR's built-in connection options. See
	<ulink url="https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING">
	libpq connection strings</ulink>.
       </para>
       <note>
        <para>
         BDR automatically sets a fallback application name and enables more
         aggressive keepalives:
         <programlisting>
connect_timeout=30
keepalives=1
keepalives_idle=20
keepalives_interval=20
keepalives_count=5
         </programlisting>
         You may override these settings with this option, e.g.:
<programlisting>
bdr.extra_apply_connection_options = 'keepalives=0'
</programlisting>
         It is not recommended to turn keepalives off unless you are having
         problems with apply of a large, long running transaction running to
         completion on an erratic network.
        </para>
       </note>
       <para>
        Changes take effect on server configuration reload, a restart is not
        required.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
  </sect2>
 </sect1>
</chapter>
